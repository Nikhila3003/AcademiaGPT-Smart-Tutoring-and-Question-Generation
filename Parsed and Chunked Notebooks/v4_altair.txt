[[{'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '# Altair: Vega-Lite in Python\n\nIn this notebook we will learn about Vega-Lite in Python\n\nThere are multiple Vega and Vega-Lite wrappers in Python\n\nThe one we will learn about (which is also the most popular) is called `altair`\n\nThe purpose of this notebook is to introduce the core concepts of Altair\n\nFurther exploration and experimentation will be left as an exercise\n\n> Note: we borrow heavily from the [official documentation](https://altair-viz.github.io/getting_started/overview.html) in this notebook. We strongly encourage you to review the documentation yourself for more examples and details on how to utilize altair in your workflow'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': '# uncomment the line below and evaluate this cell to install altair\n# %pip install --user altair vega_datasets'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '## Overview\n\nCore concepts:\n\n- `alt.Chart`: The *container* for your chart specification. Typically all charts start with `alt.Chart(df: DataFrame)`\n- `marks`: A *type* of visual element -- perhaps a line, circle, star, bar, etc.\n- `encodings`: A *mapping* between the columns in your dataset and "visual encoding channels" -- perhaps x, y, color, etc.'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Example: cars scatter'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'import altair as alt\n\n# load a simple dataset as a pandas DataFrame\nfrom vega_datasets import data\ncars = data.cars()\ncars.head()'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': "c_cars = alt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n).interactive()\nc_cars"}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': "## Marks and Encodings\n\nLet's dive into more detail about marks and encodings\n\nWe'll use the following dataset as an example"}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'import pandas as pd\ndata = pd.DataFrame(\n    {\n        "a": list("CCCDDDEEE"),\n        "b": [2, 7, 4, 1, 2, 6, 8, 4, 7],\n        "c": [1, 2, 3]*3,\n    }\n)\n\ndata'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Marks\n\nThe mark property is how altair tells Vega what *type* of element to draw\n\nThese are set on the `Chart` object using a method named `.mark_TYPE` where `TYPE` is the type of the mark:'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'alt.Chart(data).mark_point()'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'alt.Chart(data).mark_rect()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'c2 = alt.Chart(data).mark_circle()\nprint(type(c2))\nc2'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': "In these examples there is actually one mark per row in the dataset (9 marks)\n\nHowever, all the marks are plotted on top of one another because we haven't specified where they should be plotted\n\nTo fix this we need to *encode* variables (columns) of our dataset as visual channels\n\nTo do this we use the `Chart.encode` method (notice that `Chart.mark_TYPE` returns `Chart`, so we can chain the `.encode` method call)"}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': "Below we'll instruct altair to map the column named `a` to the `x` channel, which controls the horizontal or x position of the mark"}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'alt.Chart(data).mark_point().encode(x="a")'}], [{'cell_type': 'markdown', 'metadata': {}, 'source': 'In this chart we can see three distinct marks\n\nThere are actually three points at each of `C`, `D`, and `E`'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'To see all 9 points we also need to encode the `y` channel:'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'c2 = (\n    alt.Chart(data)\n    .mark_point()\n    .encode(\n        x="a",\n        y="b"\n    )\n)\nc2'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'We can now map the `c` column to another channel...\n\n> Note: `.encode` also returns a `Chart` so we can call `.encode` again to add more mappings'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'c2.encode(color="c")'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'c2.encode(size="c")'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': "### Aggregations\n\nWhen specifying the encoding for the chart, we mapped keyword arguments (like `x` and `y`) into strings\n\nAbove we used strings that mapped into column names\n\nAltair has a mini-language for expressing other types of operations in the strings\n\nWe'll demonstrate this via examples"}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '#### Example: Plotting mean over `a`\n\n**Want**: Plot the mean of the values in column `b`, for each value in column `a`\n\nBeing pandas experts, we might first think to do a groupby then plot:'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': '(\n    alt.Chart(data.groupby("a").mean().reset_index())\n    .mark_point()\n    .encode(x="a", y="b")\n)'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'This certainly works, but we can actually let altair do the aggregation for us:'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'c3 = (\n    alt.Chart(data)\n    .mark_point()\n    .encode(x="a", y="average(b)")\n)\n\nc3'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'There are a few benefits to doing things this way:\n\n1. The y-axis label was set to "Average of b" instead of just "b"\n2. We can leverage further Altair operations that might not be as straightforward with raw pandas then altair\n3. The aggregations or transformations happen in a context that is aware of the rest of the chart, allowing for other optimizations or conveniences (similar to setting y-axis title)'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Our chart above did what we said we wanted, but looks a bit odd...\n\nUsually an aggregation like an average is represented via bars instead of points\n\nTo make a bar chart instead we need to use the `rect` mark:'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'c3.mark_bar()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Another tweak we might make to this chart would be to make a horizontal bar chart\n\nTo do this we need only swap the map for the `x` and `y` channels:'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'c4 = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(y="a", x="average(b)")\n)\n\nc4'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '### Viewing Chart JSON\n\nThe main purpose of the altair library is to make it convenient for Python users to create Vega-Lite compliant JSON specifications from pandas DataFrames\n\nAltair can report back the JSON that it generated using the `to_json` method'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'print(c4.to_json())'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Viewing the chart JSON can be a useful debugging tool when trying to learn from the Altair or Vega-Lite documentation'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': "## Data in Altair\n\nLet's take a closer look at the `encoding` section of the Vega-Lite JSON for `c4` from above:"}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'print(c4.encoding.to_json())'}, {'cell_type': 'markdown', 'metadata': {}, 'source': 'Notice that both "x" and "y" have a `type` field\n\nVega-Lite requires that all encoding channels have a type\n\nAltair took care of these for us based on the dtype of the DataFrame column'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'There are 5 core types of encoding, summarized in the table below:\n\n<table class="docutils" border="1">\n<colgroup>\n<col width="16%">\n<col width="19%">\n<col width="65%">\n</colgroup>\n<thead valign="bottom">\n<tr class="row-odd"><th class="head">Data Type</th>\n<th class="head">Shorthand Code</th>\n<th class="head">Description</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr class="row-even"><td>quantitative</td>\n<td><code class="docutils literal"><span class="pre">Q</span></code></td>\n<td>a continuous real-valued quantity</td>\n</tr>\n<tr class="row-odd"><td>ordinal</td>\n<td><code class="docutils literal"><span class="pre">O</span></code></td>\n<td>a discrete ordered quantity</td>\n</tr>\n<tr class="row-even"><td>nominal</td>\n<td><code class="docutils literal"><span class="pre">N</span></code></td>\n<td>a discrete unordered category</td>\n</tr>\n<tr class="row-odd"><td>temporal</td>\n<td><code class="docutils literal"><span class="pre">T</span></code></td>\n<td>a time or date value</td>\n</tr>\n<tr class="row-even"><td>geojson</td>\n<td><code class="docutils literal"><span class="pre">G</span></code></td>\n<td>a geographic shape</td>\n</tr>\n</tbody>\n</table>'}, {'cell_type': 'markdown', 'metadata': {}, 'source': "Using the shorthand code we can give altair a hint about the type of our columns\n\nWe'll see that the type has significant implications for some encoding channels..."}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'c2.encode(color="c:Q").mark_bar()'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'c2.encode(color="c:O").mark_bar()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'c2.encode(color="c:N").mark_bar()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'The shorthand for specifying the type of an encoding also works when using an aggregation:'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': '(\n    alt.Chart(data)\n    .mark_bar()\n    .encode(x="a", y="average(b):Q")\n)'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': '(\n    alt.Chart(data)\n    .mark_bar()\n    .encode(x="a", y="average(b):N")\n)'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': '(\n    alt.Chart(data)\n    .mark_bar()\n    .encode(x="a", y="average(b):O")\n)'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': "Sometimes the `keyword=STRING` shorthand isn't flexible enough for a particular application\n\nAltair also lets you construct the encoding channels using `alt.CHANNEL` types\n\nThese types are passed as unordered positional arguments before any keyword arguments\n"}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': '(\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        alt.X("a"), # x = "a"  \n        alt.Y("b", aggregate="average", type="quantitative"),  # y="average(b):Q"\n#         alt.Color("c"),\n        color="c",\n    )\n)'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Data from files\n\nIn addition to setting data for our charts by passing in a DataFrame, we could also pass a url to a remote dataset\n\n> Note when not using a DataFrame, we **must** specify column types'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'url_cars = "https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/cars.json"\n\nc_cars_url = alt.Chart(url_cars).mark_point().encode(\n    x=\'Horsepower:Q\',\n    y=\'Miles_per_Gallon:Q\',\n    color=\'Origin:N\',\n).interactive()\n\nc_cars_url'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'url_aapl = "https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv"\n\nc_aapl = (\n    alt.Chart(url_aapl)\n    .mark_line()\n    .encode(x="AAPL_x:T", y="AAPL_y:Q")\n).interactive()\n\nc_aapl'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'This is not much easier than generating a DataFrame using `pd.read_csv(url_aapl)` and then passing the DataFrame to Altair\n\nSo, why would we do it?\n\nThe benefit here is that the JSON spec for the chart can actually contain a URL which will be handled by the Vega-Lite runtime when rendering the chart\n\nWith a DataFrame, all the data is written out/hard-coded into the JSON spec before Vega-Lite sees it'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'print(len(c_cars.to_json()))  # not going to print the whole thing... too long'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'print(len(c_cars_url.to_json()))'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'print(c_cars_url.to_json())'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'print(c_cars.to_json())'}, {'cell_type': 'markdown', 'metadata': {}, 'source': 'The smaller spec size makes a Vega-Lite chart more suitable for sharing, loading into websites, or tracking with version control systems'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': "### Other features\n\nThere are many other features we didn't cover:\n\n- Chart Types: maps, candlesticks, compound chart types (multiple marks), heatmaps, area chart, scatter charts, etc...\n- Compound Charts: multiple subplots in one figure\n- Interactivity: linked brushing\n- Customization: colors, labels\n\nThe best way to learn these concepts is by practice and study of the documentation\n\nWe'll provide opportunity for both on the upcoming homework"}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '### Saving to webpage\n\nThe last thing we will show is how straightforward it is to include an Altair chart on a webpage\n\nThe `Chart` type has a `to_html` method that will generate an html document\n\nThis can be used directly as a standalone webpage, or parts can be copied and pasted into an existing page\n\n'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'print(c_aapl.to_html())'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'with open("aapl_altair_chart.html", "w") as f:\n    f.write(c_aapl.to_html())'}]]