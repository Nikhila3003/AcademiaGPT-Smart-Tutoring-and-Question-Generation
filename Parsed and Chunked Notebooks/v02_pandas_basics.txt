[[{'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '# Basic Functionality\n\n**Prerequisites**\n\n- [pandas Intro](./v01_pandas_intro.ipynb)\n\n\n**Outcomes**\n\n- Be familiar with `datetime`  \n- Use built-in aggregation functions and be able to create your own and\n  apply them using `agg`  \n- Use built-in Series transformation functions and be able to create your\n  own and apply them using `apply`  \n- Use built-in scalar transformation functions and be able to create your\n  own and apply them using `applymap`  \n- Be able to select subsets of the DataFrame using boolean selection  \n- Know what the “want operator” is and how to apply it  \n\n\n**Data**\n\n- US state unemployment data from Bureau of Labor Statistics  '}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '## Outline\n\n- [Basic Functionality](#Basic-Functionality)  \n  - [State Unemployment Data](#State-Unemployment-Data)  \n  - [Dates in pandas](#Dates-in-pandas)  \n  - [DataFrame Aggregations](#DataFrame-Aggregations)  \n  - [Transforms](#Transforms)  \n  - [Boolean Selection](#Boolean-Selection)  \n  - [Exercises](#Exercises)  '}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '## State Unemployment Data\n\nIn this lecture, we will use unemployment data by state at a monthly\nfrequency.\n\n'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'import pandas as pd\n\n%matplotlib inline\n# activate plot theme\nimport qeds\nqeds.themes.mpl_style();\n\npd.__version__'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'First, we will download the data directly from a url and read it into a pandas DataFrame.'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': '## Load up the data -- this will take a couple seconds\nurl = "https://datascience.quantecon.org/assets/data/state_unemployment.csv"\nunemp_raw = pd.read_csv(url, parse_dates=["Date"])'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'The pandas `read_csv` will determine most datatypes of the underlying columns.  The\nexception here is that we need to give pandas a hint so it can load up the `Date` column as a Python datetime type: the `parse_dates=["Date"]`.\n\nWe can see the basic structure of the downloaded data by getting the first 5 rows, which directly matches\nthe underlying CSV file.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp_raw.head()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': '-'}}, 'source': 'Note that a row has a date, state, labor force size, and unemployment rate.\n\nFor our analysis, we want to look at the unemployment rate across different states over time, which\nrequires a transformation of the data similar to an Excel pivot-table.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': '# Don\'t worry about the details here quite yet\nunemp_all = (\n    unemp_raw\n    .reset_index()\n    .pivot_table(index="Date", columns="state", values="UnemploymentRate")\n)\nunemp_all.head()'}], [{'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Finally, we can filter it to look at a subset of the columns (i.e. “state” in this case).'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'states = [\n    "Arizona", "California", "Florida", "Illinois",\n    "Michigan", "New York", "Texas"\n]\nunemp = unemp_all[states]\nunemp.head()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'When plotting, a DataFrame knows the column and index names.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.plot(figsize=(8, 6))'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '## Dates in pandas\n\nYou might have noticed that our index now has a nice format for the\ndates (`YYYY-MM-DD`) rather than just a year.\n\nThis is because the `dtype` of the index is a variant of `datetime`.'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.index'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'We can index into a DataFrame with a `DatetimeIndex` using string\nrepresentations of dates.\n\nFor example'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# Data corresponding to a single date\nunemp.loc["2000-01-01", :]'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# Data for all days between New Years Day and June first in the year 2000\nunemp.loc["01/01/2000":"06/01/2000", :]'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'source': 'We will learn more about what pandas can do with dates and times in an\nupcoming lecture on time series data.'}], [{'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '## DataFrame Aggregations\n\nLet’s talk about *aggregations*.\n\nLoosely speaking, an aggregation is an operation that combines multiple\nvalues into a single value.\n\nFor example, computing the mean of three numbers (for example\n`[0, 1, 2]`) returns a single number (1).\n\nWe will use aggregations extensively as we analyze and manipulate our data.\n\nThankfully, pandas makes this easy!'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Built-in Aggregations\n\npandas already has some of the most frequently used aggregations.\n\nFor example:\n\n- Mean  (`mean`)  \n- Variance (`var`)  \n- Standard deviation (`std`)  \n- Minimum (`min`)  \n- Median (`median`)  \n- Maximum (`max`)  \n- etc…  \n\n\n>**Note**\n>\n>When looking for common operations, using “tab completion” goes a long way.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.mean()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'As seen above, the aggregation’s default is to aggregate each column.\n\nHowever, by using the `axis` keyword argument, you can do aggregations by\nrow as well.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.var(axis=1).head()'}], [{'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Writing Your Own Aggregation\n\nThe built-in aggregations will get us pretty far in our analysis, but\nsometimes we need more flexibility.\n\nWe can have pandas perform custom aggregations by following these two\nsteps:\n\n1. Write a Python function that takes a `Series` as an input and\n  outputs a single value.  \n1. Call the `agg` method with our new function as an argument.  \n\n\nFor example, below, we will classify states as “low unemployment” or\n“high unemployment” based on whether their mean unemployment level is\nabove or below 6.5.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '#\n# Step 1: We write the (aggregation) function that we\'d like to use\n#\ndef high_or_low(s):\n    """\n    This function takes a pandas Series object and returns high\n    if the mean is above 6.5 and low if the mean is below 6.5\n    """\n    if s.mean() < 6.5:\n        out = "Low"\n    else:\n        out = "High"\n\n    return out'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '#\n# Step 2: Apply it via the agg method.\n#\nunemp.agg(high_or_low)'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# How does this differ from unemp.agg(high_or_low)?\nunemp.agg(high_or_low, axis=1).head()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Notice that `agg` can also accept multiple functions at once.'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.agg([min, max, high_or_low])'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '**Exercise 2**\n\nDo the following exercises in separate code cells below:\n\n- At each date, what is the minimum unemployment rate across all states\n  in our sample?  \n- What was the median unemployment rate in each state?  \n- What was the maximum unemployment rate across the states in our\n  sample? What state did it happen in? In what month/year was this\n  achieved?  \n  - Hint 1: What Python type (not `dtype`) is returned by the\n    aggregation?  \n  - Hint 2: Read documentation for the method `idxmax`  \n- Classify each state as high or low volatility based on whether the\n  variance of their unemployment is above or below 4.  '}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.min(axis=1)'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'unemp.median()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'print(unemp.max().max())\nprint(unemp.max().idxmax())\nprint(unemp.max(axis=1).idxmax())'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': 'def ur_volatility_classify(s):\n    """\n    Classifies the volatility of a series. A series is deemed\n    high volatility if the variance is higher than 4\n    \n    Parameters\n    ----------\n    s : Series\n        The series that we are classifying\n    \n    Returns\n    -------\n    _ : str\n        Either "high" or "low"\n    """\n    var = s.var()\n    \n    return "high" if var > 4 else "low"\n\nunemp.apply(ur_volatility_classify)'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '## Transforms\n\nMany analytical operations do not necessarily involve an aggregation.\n\nThe output of a function applied to a Series might need to be a new\nSeries.\n\nSome examples:\n\n- Compute the percentage change in unemployment from month to month.  \n- Calculate the cumulative sum of elements in each column.  '}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '### Built-in Transforms\n\npandas comes with many transform functions including:\n\n- Cumulative sum/max/min/product (`cum(sum|min|max|prod)`)  \n- Difference  (`diff`)  \n- Elementwise addition/subtraction/multiplication/division (`+`, `-`, `*`, `/`)  \n- Percent change (`pct_change`)  \n- Number of occurrences of each distinct value (`value_counts`)  \n- Absolute value (`abs`)  \n\n\nAgain, tab completion is helpful when trying to find these functions.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp.head()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp.pct_change().head()'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp.diff().head()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Transforms can be split into to several main categories:\n\n1. *Series transforms*: functions that take in one Series and produce another Series. The index of the input and output does not need to be the same.  \n1. *Scalar transforms*: functions that take a single value and produce a single value. An example is the `abs` method, or adding a constant to each value of a Series.  '}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Custom Series Transforms\n\npandas also simplifies applying custom Series transforms to a Series or the\ncolumns of a DataFrame. The steps are:\n\n1. Write a Python function that takes a Series and outputs a new Series.  \n1. Pass our new function as an argument to the `apply` method (alternatively, the `transform` method).  \n\n\nAs an example, we will standardize our unemployment data to have mean 0\nand standard deviation 1.\n\nAfter doing this, we can use an aggregation to determine at which date the\nunemployment rate is most different from “normal times” for each state.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '#\n# Step 1: We write the Series transform function that we\'d like to use\n#\ndef standardize_data(x):\n    """\n    Changes the data in a Series to become mean 0 with standard deviation 1\n    """\n    mu = x.mean()\n    std = x.std()\n\n    return (x - mu)/std'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '#\n# Step 2: Apply our function via the apply method.\n#\nstd_unemp = unemp.apply(standardize_data)\nstd_unemp.head()'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# Takes the absolute value of all elements of a function\nabs_std_unemp = std_unemp.abs()\n\nabs_std_unemp.head()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# find the date when unemployment was "most different from normal" for each State\ndef idxmax(x):\n    # idxmax of Series will return index of maximal value\n    return x.idxmax()\n\nabs_std_unemp.agg(idxmax)'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '### Custom Scalar Transforms\n\nAs you may have predicted, we can also apply custom scalar transforms to our\npandas data.\n\nTo do this, we use the following pattern:\n\n1. Define a Python function that takes in a scalar and produces a scalar.  \n1. Pass this function as an argument to the `applymap` Series or DataFrame method.  \n'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '**Example**\n\nImagine that we want to determine whether unemployment was high (> 6.5),\nmedium (4.5 < x <= 6.5), or low (<= 4.5) for each state and each month.\n\n1. Write a Python function that takes a single number as an input and\n  outputs a single string noting if that number is high, medium, or low.  \n2. Pass your function to `applymap` (quiz: why `applymap` and not\n  `agg` or `apply`?) and save the result in a new DataFrame called\n  `unemp_bins`.  \n'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'def unemployment_classifier(ur):\n    """\n    Classifies the unemployment rate as high, medium, or low\n    based on the value\n    \n    Parameters\n    ----------\n    ur : scalar(float)\n        The unemployment rate\n    \n    Returns\n    -------\n    out : str\n        The classification "high", "medium", or "low"\n    """\n    if ur > 6.5:\n        return "high"\n    elif ur > 4.5:\n        return "medium"\n    else:\n        return "low"'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_bins = unemp.applymap(unemployment_classifier)\nunemp_bins.head()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '3. (Challenging) This exercise has multiple parts:  \n  1. Use another transform on `unemp_bins` to count how many\n    times each state had each of the three classifications.  \n    - Hint 1: Will this value counting function be a Series or scalar\n      transform?  \n    - Hint 2: Try googling "pandas count unique value" or something\n      similar to find the right transform.  \n  2. Construct a horizontal bar chart of the number of occurrences of\n    each level with one bar per state and classification (21 total\n    bars).  \n'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_class_count = unemp_bins.apply(\n    pd.Series.value_counts\n)\n\nunemp_class_count.head()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_class_count.T.loc[:, ["low", "medium", "high"]].plot(kind="bar")'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '4. (Challenging) Repeat the previous step, but count how many states had\n  each classification in each month. Which month had the most states\n  with high unemployment? What about medium and low?  '}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_monthly_count = unemp_bins.apply(\n    pd.Series.value_counts, axis=1\n).fillna(0.0)\n\nunemp_monthly_count.head()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_monthly_count["high"].idxmax()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_monthly_count["medium"].idxmax()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_monthly_count["low"].idxmax()'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'slide'}}, 'source': '## Boolean Selection\n\nWe have seen how we can select subsets of data by referring to the index\nor column names.\n\nHowever, we often want to select based on conditions met by\nthe data itself.\n\nSome examples are:\n\n- Restrict analysis to all individuals older than 18.  \n- Look at data that corresponds to particular time periods.  \n- Analyze only data that corresponds to a recession.  \n- Obtain data for a specific product or customer ID.  \n\n\nWe will be able to do this by using a Series or list of boolean values\nto index into a Series or DataFrame.\n\nLet’s look at some examples.'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'outputs': [], 'source': "unemp_small = unemp.head()  # Create smaller data so we can see what's happening\nunemp_small"}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# list of booleans selects rows\nunemp_small.loc[[True, True, True, False, False], :]'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': "pd.DataFrame({'Arizona': [4.1, 4.1, 4.0, 4.0, 4.0],\n 'California': [5.0, 5.0, 5.0, 5.1, 5.1],\n 'Florida': [3.7, 3.7, 3.7, 3.7, 3.7],\n 'Illinois': [4.2, 4.2, 4.3, 4.3, 4.3],\n 'Michigan': [3.3, 3.2, 3.2, 3.3, 3.5],\n 'New York': [4.7, 4.7, 4.6, 4.6, 4.6],\n 'Texas': [4.6, 4.6, 4.5, 4.4, 4.3]})"}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'df = unemp_small\ndf.loc[(df["California"] < 5.1) & (df["Texas"].isin([4.6, 4.3]))]'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': 'unemp_small.to_dict(orient="list")'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# second argument selects columns, the  ``:``  means "all".\n# here we use it to select all columns\nunemp_small.loc[[True, False, True, False, True], :]'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# can use booleans to select both rows and columns\nunemp_small.loc[[True, True, True, False, False], [True, False, False, False, False, True, True]]'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '### Creating Boolean DataFrames/Series\n\nWe can use [conditional statements](../python_fundamentals/control_flow.ipynb) to\nconstruct Series of booleans from our data.'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_small["Texas"] < 4.5'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': 'Once we have our Series of bools, we can use it to extract subsets of\nrows from our DataFrame.'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_small.loc[unemp_small["Texas"] < 4.5, :]'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_small["New York"] > unemp_small["Texas"]'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'big_NY = unemp_small["New York"] > unemp_small["Texas"]\nunemp_small.loc[big_NY]'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '#### Multiple Conditions\n\nIn the boolean section of the [basics lecture](../python_fundamentals/basics.ipynb), we saw\nthat we can use the words `and` and `or` to combine multiple booleans into\na single bool.\n\nRecall:\n\n- `True and False -> False`  \n- `True and True -> True`  \n- `False and False -> False`  \n- `True or False -> True`  \n- `True or True -> True`  \n- `False or False -> False`  \n\n\nWe can do something similar in pandas, but instead of\n`bool1 and bool2` we write:'}, {'cell_type': 'markdown', 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'source': '```python\n(bool_series1) & (bool_series2)\n```\n'}], [{'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': '-'}}, 'source': 'Likewise, instead of `bool1 or bool2` we write:'}, {'cell_type': 'markdown', 'metadata': {'hide-output': False, 'slideshow': {'slide_type': '-'}}, 'source': '```python\n(bool_series1) | (bool_series2)\n```\n'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'subslide'}}, 'outputs': [], 'source': 'small_NYTX = (unemp_small["Texas"] < 4.7) & (unemp_small["New York"] < 4.7)\nsmall_NYTX'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_small[small_NYTX]'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '#### `isin`\n\nSometimes, we will want to check whether a data point takes on one of a\nseveral fixed values.\n\nWe could do this by writing `(df["x"] == val_1) | (df["x"] == val_2)`\n(like we did above), but there is a better way: the `.isin` method'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': 'unemp_small["Michigan"].isin([3.3, 3.2])'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# now select full rows where this Series is True\nunemp_small.loc[unemp_small["Michigan"].isin([3.3, 3.2])]'}, {'cell_type': 'markdown', 'metadata': {'slideshow': {'slide_type': 'subslide'}}, 'source': '#### `.any` and `.all`\n\nRecall from the boolean section of the [basics lecture](../python_fundamentals/basics.ipynb)\nthat the Python functions `any` and `all` are aggregation functions that\ntake a collection of booleans and return a single boolean.\n\n`any` returns True whenever at least one of the inputs are True while\n`all` is True only when all the inputs are `True`.\n\nSeries and DataFrames with `dtype` bool have `.any` and `.all`\nmethods that apply this logic to pandas objects.\n\nLet’s use these methods to count how many months all the states in our\nsample had high unemployment.\n\nAs we work through this example, consider the [“want\noperator”](http://albertjmenkveld.com/2014/07/07/endogeneous-price-dispersion/), a helpful\nconcept we learned from [Tom\nSargent](http://www.tomsargent.com) for clearly stating the goal of our analysis and\ndetermining the steps necessary to reach the goal.\n\nWe always begin by writing `Want:` followed by what we want to\naccomplish.\n\nIn this case, we would write:\n\n> Want: Count the number of months in which all states in our sample\nhad unemployment above 6.5%\n\n\nAfter identifying the **want**, we work *backwards* to identify the\nsteps necessary to accomplish our goal.\n\nSo, starting from the result, we have:\n\n1. Sum the number of `True` values in a Series indicating dates for\n  which all states had high unemployment.  \n1. Build the Series used in the last step by using the `.all` method\n  on a DataFrame containing booleans indicating whether each state had\n  high unemployment at each date.  \n1. Build the DataFrame used in the previous step using a `>`\n  comparison.  \n\n\nNow that we have a clear plan, let’s follow through and *apply* the want\noperator:'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# Step 3: construct the DataFrame of bools\nhigh = unemp > 6.5\nhigh.head()'}, {'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# Step 2: use the .all method on axis=1 to get the dates where all states have a True\nall_high = high.all(axis=1)\nall_high.head()'}], [{'cell_type': 'code', 'execution_count': None, 'metadata': {'hide-output': False, 'slideshow': {'slide_type': 'fragment'}}, 'outputs': [], 'source': '# Step 1: Call .sum to add up the number of True values in `all_high`\n#         (note that True == 1 and False == 0 in Python, so .sum will count Trues)\nmsg = "Out of {} months, {} had high unemployment across all states"\nprint(msg.format(len(all_high), all_high.sum()))'}]]