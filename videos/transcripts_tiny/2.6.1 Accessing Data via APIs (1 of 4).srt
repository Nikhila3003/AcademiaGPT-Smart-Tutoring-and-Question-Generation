1
00:00:00,000 --> 00:00:09,000
Hello, this is Spencer Lyon and in this video we're going to be talking about APIs and communicating with web services.

2
00:00:09,000 --> 00:00:16,000
Our goals for this video will be to understand the roles of an API and when they may be useful.

3
00:00:16,000 --> 00:00:22,000
We'll also seek to become familiar with how different web services or websites,

4
00:00:22,000 --> 00:00:30,000
it's a big API information available and accessible to software developers like ourselves.

5
00:00:30,000 --> 00:00:36,000
Finally, we will work towards understanding the core parts of making an API request,

6
00:00:36,000 --> 00:00:42,000
and this will include a discussion of topics like endpoints, parameters and authentication.

7
00:00:42,000 --> 00:00:49,000
So to begin, what is an API?

8
00:00:49,000 --> 00:00:56,000
The acronym API stands for Application Programming Interface.

9
00:00:56,000 --> 00:01:10,000
Really an API is a way for one computer program or system to communicate with and use the facilities offered by another computer program or system.

10
00:01:10,000 --> 00:01:20,000
It's a layer that facilitates collaboration and communication between programs.

11
00:01:20,000 --> 00:01:28,000
Whenever you are interacting with an API, there will be two main participants in each of these participants has a specific role.

12
00:01:28,000 --> 00:01:30,000
First, we'll be the producer.

13
00:01:30,000 --> 00:01:35,000
This participant or party will set up a service for others to consume.

14
00:01:35,000 --> 00:01:44,000
They dictate the behaviors and the permissions for how data can be accessed and how the service can be used.

15
00:01:44,000 --> 00:01:47,000
The counterparty is called the consumer.

16
00:01:47,000 --> 00:01:53,000
They make requests in order to utilize the service provided by the producer.

17
00:01:53,000 --> 00:01:56,000
They adhere to the structure that set up by the producer.

18
00:01:56,000 --> 00:02:11,000
In most of our work, we will be playing the role of consumer where we would like to interact with the APIs provided by a third party.

19
00:02:11,000 --> 00:02:14,000
APIs have many uses or purposes.

20
00:02:14,000 --> 00:02:16,000
Some of them are as follows.

21
00:02:16,000 --> 00:02:21,000
An API can be used to perform a particular action on a service.

22
00:02:21,000 --> 00:02:34,000
For example, if you'd like to post a new message or video or photo to a social media network like Twitter.

23
00:02:34,000 --> 00:02:42,000
Another use for an API might be between different services within the walls of the same company.

24
00:02:42,000 --> 00:03:00,000
An example when I've uploaded this photo to Twitter, perhaps they have a different system that will then do some analysis or perhaps a machine learning tasks on my photo to help me tag users or identify the contents of the photo.

25
00:03:00,000 --> 00:03:08,000
The way that the upload service may request that the machine learning task runs could be through an API.

26
00:03:08,000 --> 00:03:15,000
Finally, APIs are often used to have a controlled method for distributing data to users.

27
00:03:15,000 --> 00:03:26,000
An example here might be providing access to price feeds for financial asset within an exchange.

28
00:03:26,000 --> 00:03:35,000
In our class in our usage, we're mostly going to be using the API to request data from some third party data provider.

29
00:03:35,000 --> 00:03:41,000
So we would follow under this third example above.

30
00:03:41,000 --> 00:03:45,000
So how can we get started with identifying or finding an API?

31
00:03:45,000 --> 00:03:58,000
Well, in our experience, we found that most platforms or companies provide an API for the developers to leverage if they intend their system to be built upon or integrated into other software.

32
00:03:58,000 --> 00:04:03,000
When I get to a website that I would like to consume from say a Python program,

33
00:04:03,000 --> 00:04:10,000
I will typically search around the website for terms like API developers or tool on the website.

34
00:04:10,000 --> 00:04:15,000
Typically there will be a link that I can follow that will give me more information on how to get started.

35
00:04:15,000 --> 00:04:17,000
Let's look at a few examples.

36
00:04:17,000 --> 00:04:28,000
So if we open this link right here and look at the GitHub page, you'll see here my GitHub is added and I'm going to do control F to open up my search window.

37
00:04:28,000 --> 00:04:32,000
And here I'll search for the term API.

38
00:04:32,000 --> 00:04:36,000
There's only one instance of this acronym here on the page.

39
00:04:36,000 --> 00:04:49,000
And if I click it, I now start to get information on how I can integrate a custom piece of software like a Python program with the GitHub API.

40
00:04:49,000 --> 00:04:54,000
As a second example, let's click on the second link that goes to and forgive my pronunciation.

41
00:04:54,000 --> 00:04:58,000
Who boy?

42
00:04:58,000 --> 00:05:01,000
This is a cryptocurrency exchange.

43
00:05:01,000 --> 00:05:10,000
And here again, I'll control F, I'll press API and down here in the footer again, there's something called API docs.

44
00:05:10,000 --> 00:05:23,000
If I click this, I'm open to a page that describes all the different things a program can do in order to interact with this particular website.

45
00:05:23,000 --> 00:05:31,000
Notice the pattern that in both of these cases, there was something near the bottom of the page in the footer that provided information for us.

46
00:05:31,000 --> 00:05:36,000
On this site is called API docs. On the GitHub site, it was called API.

47
00:05:36,000 --> 00:05:39,000
But it appeared and roughly the same location.

48
00:05:39,000 --> 00:05:42,000
This is a convention that's often followed.

49
00:05:42,000 --> 00:05:44,000
Let's look at the last example.

50
00:05:44,000 --> 00:05:49,000
I'm going to go here and go to the World Bank's Open Data website.

51
00:05:50,000 --> 00:05:55,000
And from here, if I search for API, I don't get much.

52
00:05:55,000 --> 00:06:03,000
But if I search for tool, see here that they do have what's called an open data toolkit.

53
00:06:03,000 --> 00:06:11,000
If I follow this link, I can now see that on this page, there is a way to search for APIs.

54
00:06:11,000 --> 00:06:14,000
And again, it's in the footer area.

55
00:06:14,000 --> 00:06:23,000
And here it says APIs for developers. If we click this, then we'll get more information on how we can start integrating with the data that the World Bank provides.

56
00:06:23,000 --> 00:06:27,000
You should see this in other examples of websites.

57
00:06:27,000 --> 00:06:34,000
But sometimes it takes a little bit of searching through the website in order to find the information that you need.

58
00:06:34,000 --> 00:06:37,000
Now let's turn to how an API works.

59
00:06:37,000 --> 00:06:48,000
So typically what how an API works is that a website or data provider will set up a service that is ready to receive requests.

60
00:06:48,000 --> 00:07:00,000
And when we would like to interact with this API, we will make HTTP or web requests that have a certain structure.

61
00:07:00,000 --> 00:07:06,000
And a web request will have the following key elements in it.

62
00:07:06,000 --> 00:07:15,000
So there is something called the endpoint. And this is really the URL or the link that points to the API.

63
00:07:15,000 --> 00:07:18,000
We'll talk more about this soon.

64
00:07:18,000 --> 00:07:21,000
There's also the notion of a request type.

65
00:07:21,000 --> 00:07:29,000
There are a handful of these, but the two most common types of requests you'll see are get in all capitals.

66
00:07:29,000 --> 00:07:35,000
And this is typically used for when you want to receive data from the other service.

67
00:07:35,000 --> 00:07:39,000
And then there's the post request again in all capitals letters.

68
00:07:39,000 --> 00:07:45,000
And this is typically used when you would like to publish data or have it be saved by the other service.

69
00:07:45,000 --> 00:07:51,000
Once we have an endpoint and request type, there's also the notion of a query parameter.

70
00:07:51,000 --> 00:07:55,000
This is going to be part of a URL that follows a question mark.

71
00:07:55,000 --> 00:08:02,000
And we'll let us enable more options or details about our request.

72
00:08:02,000 --> 00:08:07,000
After the query, there's also something an optional part called the payload.

73
00:08:07,000 --> 00:08:14,000
And here the payload will allow us to attach additional data to the request.

74
00:08:14,000 --> 00:08:17,000
We'll see an example of what this means.

75
00:08:17,000 --> 00:08:24,000
Finally, the headers will allow us to provide a little more context behind who we are or why we're making the request.

76
00:08:24,000 --> 00:08:29,000
And sometimes this is required by an API provider.

77
00:08:29,000 --> 00:08:37,000
And then the last main content component is how we authenticate or identify ourselves to the API.

78
00:08:37,000 --> 00:08:42,000
So they know that we are accessing materials that we should have.

79
00:08:42,000 --> 00:08:49,000
So we'll encourage you to look back on this slide as kind of a cheat sheet or reference later on.

80
00:08:49,000 --> 00:08:54,000
And we'll go through what each of these components looks like right now.

81
00:08:54,000 --> 00:08:58,000
So an endpoint, what is an endpoint?

82
00:08:58,000 --> 00:09:05,000
An API is often organized around a set or a family of URLs or web links.

83
00:09:05,000 --> 00:09:11,000
And within the API structure, the URL is known as an endpoint.

84
00:09:11,000 --> 00:09:14,000
A URL has the following format.

85
00:09:14,000 --> 00:09:21,000
You have the scheme upfront followed by colon slash slash.

86
00:09:21,000 --> 00:09:24,000
Then you will have the host.

87
00:09:24,000 --> 00:09:28,000
Then a slash and the path.

88
00:09:28,000 --> 00:09:32,000
Then you'll have a question mark with an optional query.

89
00:09:32,000 --> 00:09:39,000
So typically the scheme, this part that appears first, is either HTTP or HTTPS.

90
00:09:39,000 --> 00:09:47,000
Host is going to be something that ends in a dot com dot edu dot us dot cn.

91
00:09:47,000 --> 00:09:55,000
What follows after the host is the path, this specifies which part of a website or an API like to access.

92
00:09:55,000 --> 00:10:06,000
And then finally the query lets you attach a little bit of data to that request to make it specific to your use case.

93
00:10:06,000 --> 00:10:11,000
As an example, we have here an example for an API's endpoint.

94
00:10:11,000 --> 00:10:15,000
Here the URL is HTTPS.

95
00:10:15,000 --> 00:10:17,000
Here's our scheme.

96
00:10:17,000 --> 00:10:22,000
We then have the host which is api dot covadcounty data dot org.

97
00:10:22,000 --> 00:10:28,000
After this, we have a slash and the path for this URL is covadus.

98
00:10:28,000 --> 00:10:34,000
Then there's a question mark and everything that follows is part of the query parameters.

99
00:10:34,000 --> 00:10:39,000
Here there are two parameters. One is the location parameter.

100
00:10:39,000 --> 00:10:45,000
And it's has the name of the query parameter on the left and the associated value on the right.

101
00:10:45,000 --> 00:10:53,000
And the other one is the variable parameter.

102
00:10:53,000 --> 00:11:01,000
The next main component after we've identified the URL, we need to know what type of request to make.

103
00:11:01,000 --> 00:11:06,000
The two most common types of HTTP requests are get and post.

104
00:11:06,000 --> 00:11:12,000
And get is used when the user would like to obtain or get data from the provider.

105
00:11:12,000 --> 00:11:20,000
And post is used when the consumer would like to store, save, or post data to the provider.

106
00:11:20,000 --> 00:11:25,000
Now this, no-manclature to use get and post is a convention.

107
00:11:25,000 --> 00:11:38,000
So it's not necessarily required, but it is the most common way that these two request types are used.

108
00:11:38,000 --> 00:11:46,000
Now that we know what type of request to make and where we're going to send it, we need to think about what other information is associated with our request.

109
00:11:46,000 --> 00:11:53,000
The next part that shows up in the URL is called the query or query parameters.

110
00:11:53,000 --> 00:11:57,000
This is everything in the URL that follows a question mark.

111
00:11:57,000 --> 00:12:01,000
They provide additional details for what is being requested.

112
00:12:01,000 --> 00:12:08,000
We can have more than one query parameter by separating them with the and or ampersand.

113
00:12:08,000 --> 00:12:13,000
Let's go back to our example where we know that the query is beginning with this question mark.

114
00:12:13,000 --> 00:12:16,000
And then it's the remainder of the URL.

115
00:12:16,000 --> 00:12:20,000
Here we have two query parameters, location.

116
00:12:20,000 --> 00:12:24,000
And its value is EQ dot 12045.

117
00:12:24,000 --> 00:12:30,000
And then we have variable and its value is EQ dot test total.

118
00:12:30,000 --> 00:12:38,000
If we had a third query parameter, what we would do is put another ampersand after the word total.

119
00:12:38,000 --> 00:12:43,000
And then we would have the name of the parameter equal sign its value.

120
00:12:47,000 --> 00:12:56,000
Now a payload is our first part of a request that is not found in the URL.

121
00:12:56,000 --> 00:12:59,000
Or specified as the type of the request.

122
00:12:59,000 --> 00:13:02,000
This is actually something that's kind of attached to a request.

123
00:13:02,000 --> 00:13:09,000
You can think of the payload as the an attachment to an email.

124
00:13:09,000 --> 00:13:14,000
So the the two address and who you're sending the email to, maybe the endpoint.

125
00:13:14,000 --> 00:13:24,000
The actual words inside the email might be the query parameters and then attachments could be thought of as the payload.

126
00:13:24,000 --> 00:13:27,000
Let's see an example of what this might look like.

127
00:13:27,000 --> 00:13:33,000
So suppose that we wanted to like a post on some social media platform.

128
00:13:33,000 --> 00:13:38,000
To do this, we might make a post request to.

129
00:13:38,000 --> 00:13:42,000
Or that looks as follows we have the scheme.

130
00:13:42,000 --> 00:13:47,000
Then we have our host our path might be likes.

131
00:13:47,000 --> 00:13:55,000
And then the body of the request would then specify the type of data we would like the social media platform to remember or to use.

132
00:13:55,000 --> 00:13:57,000
And it could look something like this.

133
00:13:57,000 --> 00:14:05,000
It might require that we pass a user and then this key is mapping to a user name on the social media platform.

134
00:14:05,000 --> 00:14:13,000
And then a post ID where this number 42 here references the internal.

135
00:14:13,000 --> 00:14:24,000
Identifier that the social media platform uses to identify the post that I would like that I wish to like.

136
00:14:24,000 --> 00:14:34,000
Notice how these this information does not appear in the URL, but it's attached to it in the body or the payload of our request.

137
00:14:34,000 --> 00:14:43,000
The next main component of making an API request is called the header.

138
00:14:43,000 --> 00:14:57,000
These are additional options that are passed with your HTTP request that provide context for who you are, what time it is, what machine you're coming from, what software you're using.

139
00:14:57,000 --> 00:15:01,000
Or the type of data you're sending or the type of data you'd like to get back.

140
00:15:01,000 --> 00:15:10,000
This is not specific to the actual request you're making it doesn't have data specifying a username or.

141
00:15:10,000 --> 00:15:19,000
The type of thing you're trying to interact with it's more just to provide context so that the server can maybe.

142
00:15:19,000 --> 00:15:24,000
Handle your request in the proper way.

143
00:15:24,000 --> 00:15:33,000
And then you're going to be passed as key value pairs, which is just like a dictionary and Python.

144
00:15:33,000 --> 00:15:44,000
Bampals of common headers that you'll see often in API requests are the content type header and this specifies the type of data that is in the payload.

145
00:15:44,000 --> 00:15:50,000
And this is the content type of text slash pith lane.

146
00:15:50,000 --> 00:15:57,000
Other times you might be passing an dictionary like we saw with the liking in social media example before.

147
00:15:57,000 --> 00:16:09,000
In this case, this should be given the content type application slash json, json, which tells the server that is processing our request that the payload.

148
00:16:09,000 --> 00:16:13,000
And then you can see that the data is JSON data in.

149
00:16:13,000 --> 00:16:17,000
Other common headers are API key or authorization.

150
00:16:17,000 --> 00:16:35,000
These are sometimes used interchangeably to pass an API key and what the proper name is for the particular web service will have to be defined by that service is documentation.

151
00:16:35,000 --> 00:16:43,000
The last main step towards interacting with an API is to understand how we can identify yourself.

152
00:16:43,000 --> 00:16:54,000
There are two main forms of self identification or authentication that are used in modern web services or APIs.

153
00:16:54,000 --> 00:17:06,000
The first is called OAuth and the idea behind this is that we'll use a trusted third party like GitHub or Twitter or Facebook to.

154
00:17:06,000 --> 00:17:19,000
Establish and my identity. So I would log in to Facebook for example and then Facebook would send my information to the server so I want to interact with.

155
00:17:19,000 --> 00:17:34,000
Another option is the use of what's called an API key and with this option the API consumer or user would register themselves directly with the API provider and in return to be given a key or password.

156
00:17:34,000 --> 00:17:39,000
This password is unique for each user and identifies who you are.

157
00:17:39,000 --> 00:17:52,000
We're going to be using API keys in our example and sometimes there are actually a query parameter that's passed in the URL and other times it's passed in a header and yet other times it's passed in a payload.

158
00:17:52,000 --> 00:18:04,000
And exactly where you need to put the authentication credentials will vary one service to the next and you need to consult the documentation for how your service should work.

159
00:18:04,000 --> 00:18:16,000
That's the end of our overview of APIs stay tuned for further examples of how to actually use these concepts to interface with the real working API.

