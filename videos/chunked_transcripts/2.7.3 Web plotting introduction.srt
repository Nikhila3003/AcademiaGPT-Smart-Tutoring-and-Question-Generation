page_content="Hello, this is Spencer Lyon and in this lecture we will learn about the different plotting libraries that are available to us for use from within Python. Before viewing this lecture young this lecture you should be familiar with pandas and the core operations on a data frame or series as well as some familiarity with matte plot lib. As when we discussed other plotting libraries we wtting libraries we will make comparisons that draw upon our knowledge of matte plot lib. The goals or outcomes for this lecture will be to have a better sense of the variety of different plotting packferent plotting packages that are available inside of Python as well as learn a bit about the differences and some of the benefits of web or JavaScript based plotting libraries. First let's talk aboutrst let's talk about plotting and Python. There are many, many different packages that can be used to create charts, graphs or other visualizations from within Python. In a 2017 talk, Jake Vanderplosslk, Jake Vanderploss summarized the Python plotting landscape and one of his killer slides in his talk had this image on it. And this is a graphic where each of these circular objects represents one pcts represents one plotting package that you could use from within Python. There are many others that are not mentioned here but these are going to be the most popular ones at least as of the time oft as of the time of his talk in 2017. You'll see that they are organized into three large networks as well as smaller little network here and then some random independent ones down in the left corner.in the left corner. We'll start up in the top right. Here we see matte plot lib. This is the original Python plotting package that was at least the original in the sense of scientific programming. Itific programming. It has very wide adoption, which is integrated into many other packages and is something that we've studied throughout this course. You'll see that from this hub that is matte plot lthat is matte plot lib, there are a number of spokes that connect to this wheel. Some of these we already know about like pandas and seaborn. Others we haven't learned too much about like GGPi, Yellowut like GGPi, Yellowbrick, BaseMap or Cartopi. So these are all different packages that in one way are another integrate with or leverage matte plot lib to create charts. The next main hub here on themain hub here on the left-hand side is JavaScript. JavaScript is a programming language used to create interactive websites and widgets or components within a website. You'll see here that there are mere that there are many different examples of JavaScript-based plotting libraries that can be used from Python. Branching off from JavaScript, we see this red line connects from JavaScript to this cirvaScript to this circle here called D3JS. D3 is something that we'll talk more about here soon, but it is one of the core libraries in the JavaScript language for creating visualizations. From D3 thinations. From D3 things like Vega, VegaLite, even platly which is up here are based in creating. We won't talk too much about these other sections as they're not tools we will be using in this course.ing in this course. Let's review what we know about matte plot lib. We'll talk a little bit about its history so we understand the context. matte plot lib was created by one John Hunter back in the eaunter back in the early 2000s and his goal was to create a Python plotting package that could produce publication quality plots that were similar in style and appearance to plots produced by the softwroduced by the software matte lab. Up until now or today it is the most widely used plotting package and its strength is creating these publication quality plots as well as being an integral part to mn integral part to many of the data analytics based libraries in Python. We've become familiar with the plot method of a panda series or data frame. There's another library called Cborn used to constrCborn used to construct statistical visualizations that are all rendered with matte plot lib. So when you write code that uses Cborn inside of the Cborn implementation it will be writing matte plot liriting matte plot lib code. Then there are other libraries for specific applications such as scikit-learn. This is using matte plot lib to generate some common visualizations in machine learning applichine learning applications. matte plot lib is very good and really excellent at doing its job or fulfilling its main purpose of creating print or the charts. However since matte plot lib was createdlot lib was created in 2003 there have been many striking advances in technology. Three that we'll talk about now are the proliferation of internet connect devices. Many people now have access to smarhave access to smartphones, laptops, tablets and these things either didn't exist or far less common, back when matte plot lib was created in the early 2000s. The next thing is that websites have gonat websites have gone from being mostly a digital representation of printed content to fully interactive applications where you can do quite sophisticated things that were previously possible only only possible only on native applications running on your operating system. And then finally something we all know and understand is that computers or computing devices are far more powerful and inexpenpowerful and inexpensive. Today compared to the early 2000s. These three phenomena as well as maybe some others that have a more secondary impact have led to a rise of web-based plotting tools. Web-baotting tools. Web-based plotting libraries are primarily written in another programming language called JavaScript. JavaScript is the language of the internet. It's what powers the vast majority of onvast majority of online applications. Ranging from things like online shopping, video or media outlets, social media and many others. JavaScript-based plots have a few distinct advantages over staticvantages over static plots like those produced by matte plot lib. First they are fully interactive. You consume, pan, toggle, rotate, have toolsips etc. You can really interact with them as you wouldh them as you would many websites. Second, these charts are responsive meaning that they can automatically know how to resize themselves, maybe changing font sizes, if the screen where the plot is beihere the plot is being viewed is smaller. So the chart can look great on a variety of different device types. Finally, the web-based charts are very shareable in the full interactive form. You can embve form. You can embed them on a website, perhaps in a blog post or on social media, or even put them inside of a different application or a mobile application. Static charts have some version or formsome version or form of these three things, but it's much less intuitive to users of modern devices. Let's talk about one particular library in the JavaScript visualization space called D3. This is onalled D3. This is one of the original and most powerful visualization libraries for JavaScript. The name D3 stands for data-driven documents, where the D comes from the first letter of those words andr of those words and the three because there are three words. From the D3 homepage we could read the following quote. D3 describes itself by saying D3.js is a JavaScript library from manipulating docuom manipulating documents based on data. D3 helps you bring data to life using HTML, SVG and CSS. These acronyms here are acronyms for different technologies within the website world. Continuing on wild. Continuing on with the quote, D3's emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualizationerful visualization components and a data-driven approach to DOM manipulation. This is a fairly technical way to say that D3 is all about creating website components that are tied to an underlying datto an underlying data source. It contains the raw building blocks that can map from a data set into some form of visualizing that data set. With D3 you can create just about any visualization. We're gsualization. We're going to go through and click on many of these links and just see and appreciate the variety of charts that can be created using D3. This first link will take us to a candlestick chto a candlestick chart. This type of chart is commonly used in financial settings. You'll see here that for every day of the year there's going to be one plot element. This plot element has two mainlement has two main components. It has a colored cylinder or rectangle as well as a line. The interpretation of these are that the color of the rectangle tells us if overall the stock price for here iock price for here it's Apple stock. If the stock price for Apple went up, throughout the day or down. Color each rectangle green, if the closing price for Apple, is higher than the opening price. Ife opening price. If the closing price was lower, then the direction would be red. You can see here because this particular rectangle is green. This must mean that the closing price is higher than theis higher than the opening and you'll see and then they wear the bottom and the top of these rectangles are marked the open and closed price. On this particular date the opening price must have beenrice must have been near about 170, while the closing price would have been near 172.5. Looking over at another example, this bar is red. This time the opening price is going to be at the top of the bat the top of the bar because the cost of the day the stock price went down. Here the opening price on what April 23rd would have been about $171. The closing price would have been closer to $165. Thn closer to $165. Then the other component would be the black vertical line that passes through the middle of the rectangle. This represents the high and low price obtained throughout the day. On thisout the day. On this example with the most extreme black line down here, we'll see that the highest price reached by that by Apple's stock throughout the day was about $157. On this day the lowest pris day the lowest price would have been down here in your $150. If we hover over it, my browser's saying that the low was $150.24 on the high was $155.157.89. You'll see that in this one type of chart,s one type of chart, we have a lot of information. We have the date, we have for each date, the open high, low, and closed prices for the Apple stock. This is a candlestick chart and down here you cound down here you could see the D3 code needed to import the data and construct the chart. Another common type of chart would be a line chart. Here we have a D3 visualization that shows off some of thehows off some of the flexibility of D3. Here are some of the features of this chart. On the horizontal axis, we see that there's a log scale. We have 100,000 here and then 200, 3, 4, 5, up to a millio4, 5, up to a million and so on. So we have a very custom notion of scale on this horizontal axis. Then we also have a very custom type of legend. And what this tells us is that the black dot for eache black dot for each of these lines represents the value of the variable in the year 1980. I'll make this a little bit bigger so we can see a more. So what this is saying is that the black dot shows uhe black dot shows us where a particular city was with population on the horizontal axis and inequality by the genie coefficient on the vertical one. So this black dot says that New York City had a pow York City had a population of probably about 15 million in 1980 and in equality index of about 4.25. Then continuing to read the legend says that the arrow will point to the value for that particulae for that particular location in 2015. So we'll see here that the population in New York City grew from maybe about 15 million to about 20. But the inequality measure grew substantially. It went fromtially. It went from about 4.25 all the way to about 7. We'll see here that there are other extreme examples of inequality growth. For example, the city of San Jose and California, Fairfield, ConnectiFairfield, Connecticut and so on. You can also conceive based on the direction of the arrow that some cities experience population decline. This city, I'm not sure which it is, but actually had popult actually had population about the same, but had a decline in inequality. So this is an example of a particularly customized line chart and trying to think of how you might do this in say map plot lis in say map plot lib or another library could be quite a bit more difficult, especially getting things like this legend correct correct. Another common visualization is a heat map. Here this is a doc. Here this is a document written by Mike Bostock. He's actually the creator of D3 and he's to be the editor of graphics and visualization at the New York Times. And he's shown us here a heat map of hhere a heat map of his home's electricity usage for every hour of the year. And he actually mentions in the text up here that he has a belief some solar panels on his home and you'll see here that thell see here that the net power consumption in the middle of the day in January is actually negative. His solar panels are producing more energy than he and his household are consuming. On some areas wing. On some areas where this legend, for sure, where the box is blue. You'll see that this happens quite a bit in the springtime. So where he lives must be fairly sunny but moderate in temperature inte in temperature in order for him to not need to consume a lot of electricity, but be able to produce a lot. You can see here there's a fairly consistent pattern of high energy usage between the hourage between the hours of 6 and 9 pm. There's a lot of deep red towards the right of the chart. And then there's also some high energy usage in the middle of the night between midnight and 1 a.m. I thoght and 1 a.m. I thought this was a particularly heat example of a heat map being able to display a wide variety of information and that was personally relevant to my plastic the boss talk. We'll go toss talk. We'll go through these next ones quickly. Here's a calendar chart. This shows the daily percent change in the Dow Jones industrial average between 2000 and 2020. So this would all the tradinwould all the trading days are represented for the year 2000 right here. We have a Monday, Tuesday, Wednesday, Thursday, Friday are the days that US equity markets are open. And then we have these colen we have these columns. We're represented these four columns right here. I represent the month of January and then we'll have February at follows and so on. So here we have 20 years worth of financiars worth of financial data showing the daily returns on the Dow Jones. You'll see a particularly volatile time filled with many deep colors in late 2008. This corresponds to the onset of the real estnset of the real estate market related financial crisis. All shown them is the great recession. You'll see here at the beginning of 2020 in March. There's also quite a bit of volatility with deep coloility with deep colors and this would be when the COVID-19 virus started to make a big impact in the United States. This is also another chart type that I personally would struggle to create using mapto create using map plot lib but isn't all that difficult using D3? This next one, I think is nearly impossible to create with standard plotting tools. So what this is is this is, let's call it, Arclet's call it, Arc diagram, that connects one component to one or more other components. And the actual example used here is the number of scenes for which each character appears in the book lame-zerin the book lame-zerob by Victor Hugo. And the link here, so Jean Valjeon, this link down here, is the main character in this story and you'll see that he co-appears with many, many different other chy different other characters. In the book, so you'll see, for example, I don't know how to pronounce these names because I'm not, I don't speak French, but this character is starting with a G, and Gring with a G, and Gribeer perhaps, was only in a scene with one other character and the character's name was this one starting with an F. This character was in a scene with the character starting withacter starting with a G, as well as down below a scene with Jean Valjeon, and then way down into the purple section, the largest arc with G.A.V. and we could continue looking through the different chagh the different characters in this play and earn this book and seeing who co-appears in a scene with other characters. What's really cool about this particular chart is the interactivity, as I hoverctivity, as I hover over a name, I immediately see in bold the other characters that co-appeared with this one, and we also can make it even more interactive. So here, it's ordered based on a group whbased on a group which would be probably part of the book, these characters appeared. You can also order it alphabetically by first name. Here we see that the A's show of the top, B, C, or all the B'B, C, or all the B's, and so on, and you could also order it by what's called degree. What this would do is it will put the character who is connected to the most other characters at the top. So hereat the top. So here we have Valjeon, the main character, because he has the most co-opriiances of any character in the book, and now, though, down at the bottom, we have some characters who only appeacters who only appear once with one other character. So the most commonly co-oprior character at the top, and then down the bottom. But it's amazing to watch how it interactively reorganizes and re-sreorganizes and re-shuffles itself. D3's often used to create maps, and this map is called a hex bin map, which has a some unique aesthetic to it, but also has some unique properties. For being able tes. For being able to represent data in a more discrete way than a contour would, but perhaps in a more localized way than you would get with only having dots or something like that. This map shows tht. This map shows the density or shy of the location of each of the 3000 operating Walmart stores in the United States. As well as the median year for when the stores in a particular region open. Whatar region open. What's interesting here is that this region of the United States is known as the Midwest, and is relatively less populated than regions on the coast. You'll see that California, has vet California, has very high population as does some of New England here, especially in New York. Florida has high population in Texas, the Midwest doesn't. However, the dots in this area are warm colos area are warm colors, meaning reds and oranges. The reason for this is that this section has the state Arkansas, which was where Walmart was founded. Walmart headquarters are in a town called Bentona town called Bentonville, Arkansas, and you'll see that there are many Walmart's in this region based on the size of the hexagon, and that they are the oldest Walmart in the United States based on thd States based on the color. You'll see that other regions, for example in Nevada, there's most many of much of this region is desert or mountain, and there are almost no Walmart's to those that are fto those that are found are relatively newer. They have cool colors like greens and blues. Other types of chart for D3. This is an interactive chart that is showing you the top 10 or maybe top 15 oror maybe top 15 or show publicly traded companies in the United States, and they're ordered based on their market capitalization, the total value of all their stock. We'll see here the years 2008, ane the years 2008, and the time is going up, and these orderings are reshuffling. You'll see that Google started not even in here. Here comes Apple in the early 2010s, Google and Apple really started tple really started to grow, and now Apple's pace of growth is accelerating in terms of its market value. As we near the end of the 2010 decade, you'll see that Amazon cropped up here, and you'll see tre, and you'll see that the top four equity or yeah equities in terms of market cap, by the end of 2019 we're all in the technology industry, Apple, Google, Amazon, and Microsoft. But this type of intBut this type of interactive visualization wouldn't possible in print or with something like Matt Plotlib without having to go through some extra hurdles. But in D3 again, because it's all web-based ait's all web-based and meant to be interactive, it's quite possible to make these types of charts. As I mentioned before, D3 can be used for mapping. Here is a what's called a CoroPleph map, where eacPleph map, where each region on the map is shaded or highlighted in a different color, or color of a different intensity. Here what's being plotted is the health adjusted life expectancy from the Worlctancy from the World Health Organization. You can see here some socioeconomic patterns occurring. There are regions in less developed countries. For example, a large portion of Africa, it has a far lrica, it has a far lower healthy life expectancy than developed areas like Europe, North America, South America, or Asia. Finally, the last one will look at is another type of map. Here, this is calleHere, this is called what the author called a spike map. What this is representing is the population in each of the counties of the United States. The center of the county or its capital will be whercapital will be where the spike is located and then the height of the spike captures the population. You'll see here that the largest spike is in Los Angeles County, in California, with population ofwith population of 10 million people. Then you have other large spikes. This would be Merrick Hopewell County in Arizona, where Phoenix Arizona is. This would be the county with Chicago in it and Coohicago in it and Cook County in the noise and so on. One thing that we want you to pay attention to here is that you can see of highly customized type of map created with the same basic primitives thabasic primitives that this more standard map was created with, or even this hex game map. The ability to create all three of these types of map with one set of tools in one library is pretty powerful.is pretty powerful. However, this power and flexibility does rather unsurprisingly come to cost. The D3 library by itself is rather low level, which means that you're not writing more code than you wmore code than you would with a package for library that's relatively higher level. For this reason, there have been many libraries created that build upon or utilize D3 to make things easier for youings easier for you to construct their charts. Two of these packages that build upon D3 are called Vega and Plotley. Both Vega and Plotley have corresponding Python packages that will explore later onill explore later on today. But first, we're going to talk about the native JavaScript version of these libraries so that we can understand what makes each of them unique. We'll start by talking aboutart by talking about Vega and it's sibling Vega Lite. Vega is a research product that comes out of the interactive data lab at the University of Washington. From the Vega's homepage, we can see this ce, we can see this core, and we'll read just this first one and leave the rest for you to be done well. Vega's documentation says that Vega is a visualization grammar, a declarative language for create language for creating, saving, and sharing, interactive visualization designs. Now, this term grammar was chosen very carefully and precisely by the Vega team. The grammar, forgive the type of here,ve the type of here, the grammar is used to build the specification for a chart. Once we have this specification for what a chart should contain, we can then apply the specification to a dataset and tn to a dataset and that will let us generate or let Vega generate a visualization. With this structure that is the Vega grammar, some rather complicated charts can be creative, created fairly easily uated fairly easily using this core set of primitives that form the grammar. This is very similar and similar intentionally to how written or spoken language is constructed. When we write or we speak,write or we speak, we'll use a core set of concepts, things like nouns, adjectives, verbs, punctuation, as well as rules for how they can be composed, as well as relate to one another, to create arbither, to create arbitrarily complex phrases and concepts. This Vega is built in a similar way. There are a few core foundational principles that need to be learned and then they are rules for how theye rules for how they can be composed and used together. Then it is very flexible once you are within the confines of this grammar in what can be produced. The Vega grammar is quite flexible and similaflexible and similar to D3, this flexibility comes at the cost of being rather low level. To make things easier for users, the team at University of Washington created a second more simplified grammare simplified grammar called Vega Light. Let's see an example. Here we have a bar chart that was created with Vega Light. Let's see a few of its properties or features. We'll see that we have labels fhat we have labels for the y-axis as well as the x-axis. We have tick labels here on the vertical axis, of course, bond to different locations perhaps. Then we also have different colors for the barscolors for the bars and these bars, these colors are stacked to form a stacked bar chart. The specification for this particular chart in Vega Light is entirely contained right here. The first line say. The first line says, in Strix Vega Light, what version of Vega Light we're using. Here it says, we are using Vega Light, version 4. Then there's a way to describe where the data can be found. Here tcan be found. Here the data is contained at a URL and it's at this particular path. Then we set what's called the mark. This is telling Vega that we'd like to draw bars on our chart. Then we have an et. Then we have an encoding. This is mapping what the field x, y and how the different components here should be colored. We'll see the x will be the sum of the yield variable, which is consistent witch is consistent with this label sum of yield. The y variable should be based on variety. That's why you see this label here as well as these items on the vertical axis. Then color should be come fromshould be come from the site variable and our dataset. That's why the legend here has a title of site and these are the different farms where this bar is grown. Notice that in this chart, we didn't ss chart, we didn't specify anything about how when chart elements should be drawn. We only described what we wanted the chart to look like. This is all contained here in this JavaScript object by speccript object by specifying a dataset, a mark and included. This type of programming is known as declarative program. In the declarative programming paradigm, the user will specify what should be done,what should be done, but not give any instruction or detail regarding how or when things should happen. This is different from the standard programming paradigm where used to when we worked with Pythowe worked with Python. Our typical Python program is imperative, where we provide to the computer a sequence of tasks to perform and then we build up the end result, one instruction or task at a time.n or task at a time. To really make clear the distinction between declarative and imperative styles of programming, let's consider a non-code example. Suppose that you were hungry, a need of a mid-mita need of a mid-mites net, and you wanted to pour for yourself a bowl of cold cereal with milk. A declarative way of specifying your end goal or want might look like this. You might say that you woulht say that you would like to have a bowl, and that this bowl should contain cereal, milk, and a spoon so that you're prepared to eat the cereal. On the other hand, a more imperative set of instructiove set of instructions for achieving this same result might be the following. Step one, get bowl from cupboard, step two, get cereal from pantry, step three, pour cereal into bowl, step four, get milkstep four, get milk from fridge, step five, pour milk into bowl, step six, get spoon from drawer, step seven, put spoon in bowl. Notice that in this list of instructions, we had to describe both whato describe both what we wanted, as well as how and when things should happen. Both mega and ploughy are declarative. Meaning we can specify just what the end result should look like and not worry aboue and not worry about how it should be constructed or created. We'll see these examples throughout the class and we'll have to go up the lecture today. Plotley is another JavaScript-based plotting libt-based plotting library that also builds upon D3. From their homepage we could read, built on top of D3JS and stacked.GL, plotlyJS is a high level declarative charting library. PlotleyJS ships with ootleyJS ships with over 40 chart types, including 3D charts, statistical graphs and SVG maps. Plotley has a very diverse set of chart types that range from your basic charts like bar and line, two sumar and line, two sums statistic, statistical charts like violins and distributions, financial charts like candlestick and scientific ones like heat maps or contours, as well as maps, 3D charts and mors, 3D charts and more. It is one of the most, it's one of the charting libraries that has the most variety in chart type in the JavaScript space. Plotley is a declarative charting library like big a llibrary like big a light, however, Plotley does not attempt to create a grammar for describing visualizations. Instead, a plotly chart is constructed by directly setting features or attributes of ther attributes of the chart. For this reason, Plotley will feel a bit more familiar than Vega does, two users of Matt Plotley or other imperative plotting libraries. We'll look at one example of creatine example of creating a chart with Plotley to show you what we mean. The chart will be looking at, I'll show them here in this tab. We see here we have another candlestick chart. This one again for sthis one again for stock prices for Apple. This chart apparently based on the horizontal axis ranges from the start of 2015 through to early 2017. You'll see here that this chart is very interactive. Wvery interactive. We can zoom, we can hover and get some tool tip information. We'll see here the candlestick features we talked about before. Upon hovering, we'll be able to see the date shown for uthe date shown for us at the bottom, as well as the open high low closed information that forms a candlestick. This chart was created with the following code back here in our notebook. First, we'll usook. First, we'll use the D3 library to load up a CSV chart for CSV. Then we have the following. We have one function that will unpack one column from this data set. We'll use it as follows. We will ss follows. We will say that the X variable on our item to be plotted comes from the date column in the CSV. Close comes from aapl.close, high aapl.high and so on. Then there's a little bit of work herttle bit of work here to customize the appearance and we'll see that we can specify that on a day where the price was increasing. We would like the line color to be black. On a day where the price waswhere the price was decreasing, we would like for the line color to be red. We'll then specify that this is a candlestick type chart that's plotted on the standard XY axis. We can then do a little bithen do a little bit of customization of the chart. We'll get to this more when we understand the structure of platly. We'll skip this for now. Then the last thing we'll do is we'll call the plat funll call the plat function. We'll pass it the description of our candlesticks as well as a little bit more information on the chart as a whole. That's it. You'll see here that this is quite different fis quite different from the Vega approach where there was a grammar where we had mark types and encoding. This is a bit more direct where we're saying here's where X should be, here's the close high le's the close high low and open, etc. And this is a little bit closer to how we might do things in that platly. But it's still fully declarative. Notice that here we just described what we want the chwhat we want the chart to look like. We don't say it all how the candlestick should be drawn or in what order. We just described the end result we're after. Then we hand that description to platly anription to platly and it is responsible for drawing the chart for us. To worry if you didn't follow all of the code here, when we study platly directly, we'll understand a bit more about how this workabout how this works. Now we just showed you a bit of that D3 Vega and platly are all libraries for the JavaScript programming language. We've done most of our examples in the Python language. It turhon language. It turns out that for both Vega and platly, there are Python packages that allow you to write Python code and work with Python data structures like pandas, data frames or python dictionas or python dictionaries. And then the Python package will use your python data and instructions send those to the JavaScript libraries for actually drawing with charts. And in this way, we can kind os way, we can kind of have the best of both worlds. We can continue to use our Python skills that we've developed and all of the tools and packages we know in that ecosystem. For doing our analysis anoing our analysis and we can get the benefits of interactivity from these JavaScript-based platly libraries." metadata={'source': 'transcripts_tiny/2.7.3 Web plotting introduction.srt'}