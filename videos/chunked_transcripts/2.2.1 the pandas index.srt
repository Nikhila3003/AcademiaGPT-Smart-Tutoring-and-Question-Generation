page_content="Hello, this is Spencer Lyon and today we're going to be continuing to learn more about data analysis in Python using the Pandas library. And today we're going to focus on understanding ts on understanding the index. Our goals for today will be to understand how we can use the index to make sure that observations and data points are aligned when we do certain operations. We'll learn htions. We'll learn how we can set the index to something different as well as reset it to get back where we started. We'll take a closer look at how we can select subsets of the data by slicing and exta by slicing and extracting values according to the index or row labels as well as the column labels. And finally we'll point out that for a data frame the column names are also used to align data ansed to align data and this will become very clear shortly. Our outline for today will be to do a high level overview of what the index is and talk about how we can set reset the index will have some edex will have some examples throughout. And we'll have a few words of advice for how you should choose which columns or which variables go on the index and we'll finish with some exercises. We'll starxercises. We'll start by importing pandas as pd and numpy as np like we normally do so that we're prepared to use those libraries going forward. So let's take a step back and try to understand what tho understand what the index is as we've told you before and as we've become a little familiar with every series and data frame has an index. And we have been referring to those as the row labels for tthe row labels for the data we didn't lie this is still true, but the index in pandas is a lot more powerful and meaningful and just labeling the rows. And the purpose of our lecture today will be tore today will be to help us understand these other properties and behaviors of the index for a series or data frame. So the pandas documentation reads that data alignment is intrinsic the link betweensic the link between labels and data will not be broken on this dense so explicitly by you. And so in the other words this means that the index and the column names are going to be used to make sure tused to make sure that the data is always properly aligned whenever you're operating on multiple data frames. This concept of pandas aligning data for us using the index and column names is a littlen names is a little abstract. So we'll load up some real data that will hopefully help us visualize and understand what's happening. The data set will be using comes from the World Bank and it is partBank and it is part of their world development indicators data set. And we have extracted and prepared a subset of that data that includes a few countries over a number of years and then some of thend then some of the components of the expenditure form of GDP. So here we have columned country year government expenditure consumption exports imports and GDP. We'll just show the first few rows so tfirst few rows so that you can get a sense of what the data looks like. We'll also want to be able to visualize operation as a whole and to do so we'll want to have some smaller data frames that we cata frames that we can kind of keep track of a little bit easier. So DF small is just going to be the first five rows of our original data frame and then DF tiny is going to be four of those rows. Butr of those rows. But the what the rows will be a little bit out of order. So you'll see here that I selected row zero first and then three two four whereas in DF small it's in the proper order zero onproper order zero one two three four. Finally we will make another data set where we're going to start with the first five rows from DF small and then we'll only keep the columns imports and exports.mports and exports. Okay, so now let's take a look at what happens when we try to add the import export data frame to a copy of itself. If we look back at what we had each of these numbers was less thnumbers was less than one it was somewhere between zero point five and one and now all the numbers are between one and two. What happened was when we asked pandas to add these two data frames it wentdata frames it went and it added them element wise it would look up the zero row and import entry of the first data frame and add it to the zero row import column of the second data frame and it didta frame and it did this for each of these ten numbers. For mind ourselves what the F tiny looks like and relative to just the import export one notice a few things there is not a row labeled one hererow labeled one here in DF tiny. And the rows that do appear zero three two four are not in the same order in the I am the import export data frame they are in numerical sorted order but here in DF tier but here in DF tiny they're not. Also there are extra columns that appear in DF tiny. That don't appear in the other data frame for example the government expenditure consumption GDP. And the two cn GDP. And the two columns that do overlap imports and exports are in different order so basically we have similar data in these two data frames but they're definitely not in the same order structure.ame order structure. Now let's see what happens when we try to add the DF tiny to the import export data frame. We'll execute this cell and we'll notice that relative to adding the import export dataimport export data frame to itself things are quite different here in this output. The first thing to point out which is summarized on the slide following this for reference when you come back to thiyou come back to this is that for all entries in this table where the row label or index value. And the column value appear in both DF tiny and import export the output cell contains the sum of the twns the sum of the two numbers. This is similar to what we saw when we were adding import export data frame to itself. But now it's surrounded by a bunch of other things. So this same operation of lookme operation of looking up the row index and the column index for the first data frame and adding that to the exact same rowly index and column index for the second data frame was repeated for all eigrepeated for all eight of these operations. And I want to point out that this happened this type of a lining happened even though the rows were in different order from DF tiny and the import export dathe import export data frame and the columns were in different order. This is exactly what we mean by pandas aligning the data for us. It wasn't our job to make sure that the rows were in the same poswere in the same position or order pandas handled that and took care of it for us. And if you're familiar with spreadsheets, this example might help. So let's think through how we might do something lmight do something like this using Excel or a different spreadsheet program. So first the tiny data frame as well as the import export one would probably be in different sheets of our Excel workbook.our Excel workbook. Then the index would be the first row of each sheet and the column names would be the first column. Oh, sorry, the first row and the index would be the first column, forgive my mislumn, forgive my miss mistake there. We would need to have a third sheet that can hold the output of our summation operation and then here's the tricky part we populate that third sheet. By looking atsheet. By looking at every label in the first column of either the DF tiny sheet or the import export sheet. Then we'll do an if else to see if the same label appears in the other sheet. And then we'lsheet. And then we'll need to do a v look up to extract the associated values. That gave me a headache just thinking through it. And the nice thing is we'll ever have to think through that again now tugh that again now that we know pandas. And pandas this all happens for us automatically and behind the scenes and it's extremely efficient it's very well implemented and happens very fast. So the hanery fast. So the handling and of the aligning road in columns is one part of this operation, but there's also a second part. So we'll just hear that every entry in the row label one as well as columnse as well as columns consumption GDP government expenditure country and year have this kind of a two-slicking entry and a n. This is the computer science speak for not a number and it's how pandas sheit's how pandas she's just represents missing data. So the reason why pandas would note that these cells are missing is because when it was trying to look up to the associated value for anything in rue for anything in row one inside of DF tiny it came up empty. DF tiny does not have a row labeled one that data is missing from the data frame. Similarly when I was trying to look at any of these othat any of these other columns that were not import your exports, it couldn't find it in the import export data frame. So because one half of this plus tradition operation was missing for each of thesing for each of these columns and row one pandas was forced to say that the operation tiny data frame plus import export data frame resulted in not a number or a missing observation for those rows andn for those rows and columns. We want to give you a chance to understand a little more how pandas will treat missing data by working through this exercise. I'll pause here for a few seconds and then ww seconds and then we can look at it together. Let's regroup here and take a look at this exercise together. So let's look at what happens when we do the import export data frame tiny version and askiny version and ask for the mean. So what we get here is that for any column that was completely filled with nands, the result of the mean will also be nand. This happens for everything except importsthing except imports and exports. However even though row labeled one had a missing value for exports, and it's still computer the number here. So let's try to understand what pandas did for us. So onas did for us. So one thing we might look at is what the hint said is what if we look at the sum of that row. And then we'll also look at. shape. So we understand how many rows. So here tells us thathere tells us that the data frame import exports had five rows and seven columns, but when we ask for the mean of exports. It gives us a number a little bit greater than one. If we look at the sum hee look at the sum here it says that the sum of exports was 4.44. And if you just do the arithmetic quickly in your head and divide 4.44 divided by five the total number of rows, you would get somethinu would get something less than one because four is less than five. So what pandas is really doing behind the scenes is it will compute the sum of all non missing data points. And then divide by the nthen divide by the number of non missing data points. In this case we went from five total rows to only four that had data in them. So in this case if we divided the 4.44 by four we'd end up with 1.11e'd end up with 1.11. So when pandas is dealing with missing data it almost skips over it as if it doesn't exist. It doesn't count in the total number of meaningful rows. It's not included in the addiincluded in the additions when you're computing the sum. We'll see more examples of missing data going forward, but this was just to get you thinking about how pandas may be doing things behind the scthings behind the scenes. So we've seen how the index can help us align data and do certain operations. And the next natural step would be okay well what if we need to align based on certain propertieon certain properties or columns of the data. For example, maybe we would want to be able to align our entries based on the year. If we wanted to set the year is the index we would call the set indexcall the set index method on our data frame and we can pass it year either as a string or as the only item in a list. And now is that pandas has gotten rid of the 01234 labels on the left. And now ththe left. And now the row labels are actually coming from the year column. We can also notice that the printed output looks slightly different than it used to. Before the year column was right up a limn was right up a little bit higher next to all these other column labels. Now it's down and a little bit to the left and it may be a little subtle to see on my computer, but if you're able to zoom inu're able to zoom in on yours, you'll see that the year column now has both numbers indicating that these are labels. All the cell values in between are all in normal font face whereas the column labereas the column labels and the row labels are all given a bold font. So now that we have the year on the index, we can use the dot lock accessor to extract data using values from the index. For examplhe index. For example, we can extract all the data for the year 2010 by doing DF year dot lock 2010. Notice here that the index value for each of these rows is indeed 2010, but now we have the observawe have the observation for Canada, Germany, and the United States. Another thing that we might want to do is be able to compute the difference in the average variable across these countries for thee countries for the year 2009 with those same values from year 2008. This would show us the change. This shows us here that on average when you consider these four countries without any type of waitint any type of waiting, government expenditures went up slightly in 2009 relative to their levels of 2008. Each of these other variables went down. As an economist, you might start thinking, well, whythinking, well, why would this happen? And if you remember, late 2008 is when the financial crisis or the great recession took place or started where the US housing market and banks started to need as started to need a little bit of assistance from the government. But we quickly entered into a global recession afterwards, which will push the other components of GDP down. So let's take a step backt's take a step back and we'll notice a few things. After we compute the mean, if you remember, right, we end up with a series whose index, or these labels over here on the left, are the former columnre the former column names that came from the data frame. So when we compute just the first half, we'll comment this out so we can take a look. We'll see here we have a series, all of the names from tof the names from the former data frame are now on the index. So then when we do the minus on this side, Pandas is actually going to be doing more data alignment. It's going to be looking for on thislooking for on this term right here that I've highlighted. The government expenditure column, it will take that term from the first the that row from the first term and subtract that same row from thhat same row from the second term. And that's how it gave us that 0.03. Again, this data alignment and the importance of being aware of what is on the index, it will continue to surface over and overrface over and over again as we work through examples and as you work through other things using Pandas. So now let's do an exercise or think of an example suppose that somebody came to you knowing thme to you knowing that you are a a studio and skill data user and they asked what was the GDP in the United States for 2010. Well, if we wanted to do that using the DF year data frame that we have herame that we have here's how we might do it. So first we'll use the dot lock. And the first thing we'll do is we'll filter out all of the rows where country is equal to the United States and we'll grabtates and we'll grab only the GDP column. Now that that's done and we're left with only observations of US GDP, we'll use dot lock a second time to extract the 2010 value from the index. And here we cindex. And here we can see that in these units it was 14.99. It's kind of a lot of work to answer a fairly simple question or to get back a single number. So now suppose that they asked you, well, whaasked you, well, what about the GDP of Germany or the United Kingdom in 2010. Again, to answer this question, we might say, okay, let's do a similar operation where we're first going to filter all theng to filter all the rows that belong to either the United Kingdom or Germany. And then we will extract the using the index, we'll extract just the observations that apply to the year 2010. If we execear 2010. If we execute this, what we'll see here is instead of the number we get back a series because we asked for more than one row. But this time the index has the year 2010 and 2010. It's somewhad 2010. It's somewhat ambiguous if the first row corresponds to the United Kingdom or to Germany. You might think that the first row, the value equal to 3.41 corresponds to the United Kingdom becauseted Kingdom because that's what came first in our list here. But it's uncertain if we go back and we check and we get all the data for your 2010, we'll see that it was indeed Germany's GDP, the how tony's GDP, the how to value of 3.41 in 2010, where that of the UK was only 2.45. So we see here that it was insufficient to only have the year on the index, we needed a little bit more information to aore information to answer that question. Let's drive this point home a little bit further and now suppose that you are asked to use this data set to get an approximation for net exports as well as invports as well as investment in the year 2009 for these four countries. And we'll remind you as a buddy in a economist that the expenditure formula for GDP can be written GDP or why, as it's often writ, as it's often written in textbooks is equal to consumption plus investment plus government expenditure plus net exports. We can rearrange this expression, very equation to get an expression for inveexpression for investment which would be GDP minus consumption minus government expenditures and minus net exports. And we'll just make a note that net exports would be total exports minus total imports minus total imports. So now our want again is to compute net exports and investment using the columns of our data frame we can directly compute net exports and then once we have that we can use the that we can use this expression here to compute investment. So here we go let's look at just net exports we're going to use this DF year exports minus the DF year imports and we'll look at the firstll look at the first few rows. The reason I chose 19 was we have 18 years worth of data for each country so I wanted to show you that we went through 2017 back to 2000 for the first country and now wet country and now we're starting over at 2017. Now suppose that we had a bug in our code and somehow the rows got out of order for Canada and Germany and their net exports in 2017. This example is comThis example is completely contrived as you'll see by the code down here, but if you're having a more complicated problem or more code involved in your analysis this type of issue can become more andcan become more and more likely. If you notice that the last row. Had a 2 0.26 whereas the first one had a minus 0.01 we're just going to swap those two. So now the last row has a small negative numbsmall negative number whereas the first row has a positive 0.26. So now if we add back in this net exports as a column of the data frame. We can also add a column for investment by evaluating that exy evaluating that expression GDP minus consumption minus government spending minus exports. Now if we look at this data frame, Panis competes everything without any problems, but. Because we didn't alBecause we didn't align our data on both the year and the country, we would have overstated Canada's investment by 281 billion dollars and understated Germany's by the same amount. So this one small iSo this one small issue led to a quarter of a trillion dollar difference in our statement of Germany versus Canada's GDP or sorry in net investment in the year 2017. So really to try to make this typtry to make this type of operation easier for us, it would have been nice if pandas were to align both on the year and on the country. And if you remember, pandas aligns the rows of our data and our of our data and our operations using the index, so really to get the year and the country to be identifying a single observation, we need to put both year and country on the index. And that the pandasAnd that the pandas allow us to do that. And when you have multiple columns in an index, it's known as a hierarchical or multi index. So there are some situations where this might be necessary. One isbe necessary. One is when we want to extract data from more than one column and a second is when we need alignment will work through both of these right after this. So to get started, let's first seted, let's first set the index to be the country and the year. And once we've done this, you'll notice again that the columns are now just these five components of GDP or the four components plus GDP.omponents plus GDP. And just below that visually, you'll see that pandas have separated the two levels of our index on the outer or left or first if you read left to right index. Index, you have the cndex, you have the country. Here we'll see that Canada is the country for the first 18 rows. On the second level of the index, you have the year and this changes from 2017 down to 2000 like it has bef2000 like it has before. We'll refer to the country level as either the left level of the index because it appears left of year or as the outer level of the index. Conversely year would be referred towould be referred to as the right level or the inner most level. And we'll see that there are two different frames such as this again pandas documentation and things you may find online if you're looknline if you're looking for help or refer to this either as a multi index or a hierarchical index. So now we remember when our friend asked us, hey, what was the GDP of the United States in 2010. So wStates in 2010. So we're going to do this with a little bit easier. What we can do is we can use dot lock. And then remember how we have country on the left and then the year will pass these as a tuplpass these as a tuple and then we'll get the GDP column and doing this gives us back that 14.99 number. We did relatively more work to get earlier. So correctly answer our friend's follow up questionfollow up question about the GDP of the UK and Germany. Here what we'll do is we'll have a tuple where the first item, this is where we put the selection for the country, we'll have a list of Unitedve a list of United Kingdom and Germany. The second item of our tuple is the year 2010 and then we'll be selecting the GDP column. When we execute this we get back a series that has these two layers os these two layers on the index and then this one column representing GDP. But now it's very unambiguous that the 2.45 corresponds to the United Kingdom and not to Germany. So as we just saw we can use just saw we can use the dot lock accessor with our multi indexed WDI data frame to get different slices of our national accounts data. It was very easy for us to extract data for both a country andboth a country and a year. And this is a principle that holds more generally. Using dot lock with a hierarchically index data frame is very powerful and it's similar to how we've used dot lock previoused dot lock previously. However the rules are a bit more subtle and elaborate now that we have a little more structure to our data. We'll go through and we'll talk about a couple main overarching comain overarching concepts and then we'll get through and walk through what each of the rules are for how pandas will interpret. The expression given to dot lock for a multi index data frame. And we'ldata frame. And we'll make sure to follow up each of these different rules with an example that will happen in the exercise. So first let's review some slicing rules or cover them. One of the importanOne of the important distinctions to be aware of when you're reading or writing pandas code is the distinction between a list or a tuple. As you remember a tuple is an ordered collection in Python whlection in Python where you create this using parentheses on either side and the items are separated by commas. List have a very similar structure, but they are created using square brackets instead oe brackets instead of parentheses. This is very important distinction because pandas interprets these two data structures very differently. First a tuple when you're doing roselizing will be used to dng will be used to denote a single hierarchical index and you must include one tuple item for each level in your index. For example what we just saw was that we had the WDI.lock. We opened the squaree opened the square bracket here and the the row specification was a tuple where we passed united states comma 2010. This instructed pandas that we wanted the single row that corresponded to the countsponded to the country united states and the year 2010. We then closed within specified we'd like the GDP column and closed the dot lock accessor. Notice here that the tuple has kind of an implicit annd of an implicit and. Connotation to it we have a row where the country is united states and the year is to you valentine. And when we're using a list with a dot lock expression this will act as an ohis will act as an or operation and this is going to choose were choose rose where. Any of the items in the list is satisfied. Let's look back at our example. We have our WDI data frame we did dot locframe we did dot lock to an an opening square bracket and here we again we have a tuple telling pandas that we would like. To specify two items one for the country and the second for the year becauseor the year because those are the levels of our index. This time however instead of just reporting the string united states. The first item of our tuple is the list united kingdom and Germany. Now thiand Germany. Now this is telling pandas that we would like any row in the data frame where the country is either the united kingdom or Germany. We're still going to be looking for year equal to 1, 10year equal to 1, 10 and country equal to GDP but now we're going to get back any row. Where the country is either unicendum or Germany and pandas did this because it saw that we passed in a list here.ssed in a list here. So we have those two rules in mind. We're going to go over the specific rules for how you can access data inside of a hierarchy data in next data frame. I'll give a little warningive a little warning at this point these rules can be a little obtuse and I encourage you to pause the video as needed and to study these as well as experiment with the examples in the exercise followthe exercise following this discussion. So that you can really can understand how they work. Well this play I'm here I'll talk through them once but I encourage you again to study these materials latthese materials later on. So first if I were to do WDI dot lock and pass only a string. Pandas would interpret this as I'm doing a selection based on the rows. And I only want to look for rows wherelook for rows where the first level or the outer most level of my index is equal to the United States. In our example this would return a data frame that is 17 by five or by seven because there are 17because there are 17 years between 2017 and 2017 and we had seven different variables in our data frame. So there were seven if there's not the number of columns would be equal to the number of columnthe number of columns of WDI. Okay second we've already kind of talked through this one. At least partially if we were to pass the tuple United States comma 2010. So give us all rows where the outer mws where the outer most level of the index or the left most index is equal to United States. In our level of the index or the right level is equal to 2010 again we don't have a second item within theond item within the square brackets so this would give us all rows whereas before we had a comma GDP here which gave us just GDP. So we have a tuple we're looking for United States and 2010 on the levand 2010 on the levels of the index. Next we can pass a list as the first item in dialogue and this will tell pandas that we would like all rows where the first level of the index or the left most leor the left most level is equal to either the United States or Canada. Here's where it gets a little trick here. If we were to pass a tuple this is going to tell pandas we're going to provide one iteg to provide one item per level of our index for the first level we want all rows where country or the outer level of the index is either United States or Canada. And the second level of our index isvel of our index is either 2010 or 2011. So we get the or behavior happening both at the country level and then again at the year level and then we get the and behavior from this tuple where we combinuple where we combine the two. So if we were to do this the number of rows in the output here would be four we would have one row for United States 2010 another row for United States 2011 and then wees 2011 and then we would have those same two rows for Canada. Okay, here we go so now notice here that we begin the dot lock with a list instead of beginning with the tuple this tells pandas that weells pandas that we should be looking for any rows that satisfy any of the items in the list. Each of the list items is itself a tuple. Where we pass one item for the first level of the index and a sef the index and a second item for the second level here this expression will tell pandas to extract all the rows where we have the United States and 2010 on the first and second level of the index. Orvel of the index. Or where we have Canada and 2011 on the first and second level of the index the number of rows in the output of this expression would be equal to two. One for this. Inside of this tus. Inside of this tuple and a second one for this tuple. You can see here how the interplay between a list and a tuple is significant and really influences what we get back. And again, I strongly encoain, I strongly encourage you to look back on these do some practice do some study. And I'll note that any of the things that we've done on the rows we can also do for the columns so if we use dot locso if we use dot lock whatever we happen to be doing for rows we can use just. One string GDP and we'll get that column or we could use a list and we get back both the GDP and consumption columns seeumption columns see examples of this later on. But just note that we explained all five of these rules within the context of filtering out rows. But you could also use it to filter out columns by passout columns by passing it as the second argument inside of dot lock. Okay, here's an exercise I'm going to go ahead and pause here you should pause the video also as you work through these exercisesugh these exercises and we strongly encourage you as you will get each of them. And to try to understand what is returned by these and then put in writing what the answer is and kind of defend your thnd of defend your thinking. Although and stop now please pause your video and attempt the exercise. Okay welcome back. So let's work through this together let's evaluate what I will do is I will. Firsl do is I will. First all evaluate this this cell and then we'll talk through what's happening already in a comment so first. But we see here is if we do dot lock we pass it a list with United Stateswith United States and Canada. This is giving us all rows where outer index is either United States or Canada. Now I'm going to go ahead and I hope that you did this on your own I'm going to go ahead'm going to go ahead and attempt to guess what will happen before we evaluate just to see if I'm understanding what's going on. So here we have a tuple where we're passing in the United States and Cannited States and Canada as the first item and 2011 or 10 11 and 12 as the second item this will be. All rows where outer index is either US or Canada. And. Inner index. It's one of 2010 2011 2012. So2010 2011 2012. So my hunch is that we'll get six rows back from this operation. Looks like here we have rows where the outer level is Canada or the United States just as we specified. As well as thefied. As well as the year is one of 2010 11 or 12 and indeed there are six rows. So great. This next one this will give us all rows where outer index level is United States. Notice here something intehere something interesting happened. Pandas chose to drop the first or left most level of the index because each of these observations has. It is unique to identify it only using the year we've toldthe year we've told pandas that we want to work with only data for country equal to United States and now the year is sufficient to disambiguate what each of these rows means. You might seem a littlemight seem a little off putting if you think about it in this way however it's actually quite helpful. So if we were to want to compare directly the level of these valuable variables for the United Stes for the United States and say Germany. We can now do this directly because this data frame only has here on the index as well as this data frame and now pandas can use just the year to align each oyear to align each of the rows and then the columns they still align up so it's able to compute a number for each of these. I will point out that if we were to pass a list here instead of just the strtead of just the string create a pass a list with only United States it will keep this second level of the index and now if we were to try to repeat our same operation. We would see that we just get ae that we just get a bunch of nands because the first data frame didn't have anything where the country was Germany and year was 2000 or anything 2000 or 2017. So anytime that it one of these rows occne of these rows occurred the first item was missing so it has to give us a nand output. And then on the other hand the second item didn't have anything where the outer layer of the index was equal toe index was equal to United States so for every item in this data frame there was not a corresponding item in the second one again resulting in nand. So this automatic dropping of the index level whenthe index level when the secondary levels of the index are sufficient is actually quite useful in some circumstances but you just need to be aware of what's going on. Okay moving on to the next exampln to the next example here we have. A two pull here and a list here this will give us the single row for United States in 2010 and it will give us both the GDP and net exports columns so one row for umns so one row for us in 2010 and. Two columns for GDP and exports. We get a series back because we only have one row and we have two items in this series. Here this will just be a number or a seriesnumber or a series for all variables. For U.S. into other 10. Fine it starts with the list so now we're going to say. Two rows one for U.S. in 2010 and second for the type of. For Canada in 2015. GreCanada in 2015. Great this will be. All rows for. All rows with U.S. or Canada as country show all 17 years for both. Only GDP column. Great and finally this will give us. series with. Only year on twith. Only year on the index. And values of US GDP. Now, reason we knew that we would get back a single index data frame. It's because if we select everything for the United States in the first level.in the first level. The year is now sufficient to be unambiguous so it dropped the country level for us whereas above we needed the country level. Because we need to know whether or not whether theseor not whether these rows correspond to Canada or to the United States. Okay. You might want to take a break again now. Both to let your mind relax and have time to study and review the things that wew the things that we just talked about. Being able to dissect and extract exactly the right data is almost a pandas superpower that we hope that you can develop and internalize. And that will become pd that will become part of your everyday tool belt. But it takes practice so please put the time into practice in the study it will be well worthwhile. Okay, let's just focus now on the notion of datan the notion of data alignment but also when we have. Of multi index and we're mostly going to leave this to you. So we will have an exercise right here at this point where we like you to create a newyou to create a new data frame using some subset of our rows and then do some operations on it see what happens and. We'll regroup here in a few minutes so please pause at this point and attempt theint and attempt the exercise. Okay, welcome back. Let's go ahead and work through this together so first we'll create a very well my idea and for me let's just do. The rows. Let's say we would like thsay we would like the United States and Canada. For years 2015 and 2016. Take a look at what this looks like. Excuse me. Okay, so here we have four rows it's Canada and the US for the year 2015 and 16the year 2015 and 16. So now let's take a look at what would happen if we were to use this data to do some operations so first. I'm going to move this up here so we can see it on the same slide and nohe same slide and now let's try the WDI over my idea. So what happens here. I can't quite see it. I'm going to change this unless you can do thousand two and 2003. Now what happens is we get man's eveis we get man's everywhere where oh, let's add I'm sorry I'm changing this example as we go. This is a useful thing to see though so I won't let it out. Okay, so now we have the year 2003, just in 20ear 2003, just in 2016 and 17 for Canada and the US if we take the full WDI data frame and divide it by. Our new data frame will get as we have nands. In all rows that don't appear in my the F but forin my the F but for Canada in 2002 we have all ones what happened here. Was it looked at the WDI value for for Canada in 2002 and it found the government expenditure number and it looked up that samelooked up that same sell or that same entry for my idea. It looked up Canada 2002 government expenditure because these are the same we see a one everywhere. If it was anything but a one pandas woulda one pandas would be misaligning the data. But the whole point of being able to set the index and trust pandas to align things is that if we were to do this division will either see man or one thosesee man or one those are the only options. We'll see same behavior down here for the latter years of the United States. I think that one example was sufficient for our purposes here feel free to do moe feel free to do more if you like to experiment more but understanding that it's either missing or equal to one makes very clear that it's pulling out the exact same row column combinations from thembinations from the two data frames. Okay. So we've seen here that when we want to extract all rows for multiple values of an outer index and then everything for later levels we use this convenience ae this convenience and tax. In our example we had the WDI dot lock and then we could pass a list of only Canada and the United States to get back all years for both of those two countries. However, ohuntries. However, oh yeah, here's the example. And we're getting back all of Canada and all of the US for each of those years. However, suppose you wanted to get data for all the countries for only yeountries for only years 2005 to 2007 and 2009 for example. We don't yet have the tools to do this using just dot lock because the years on the second level instead of the first and we don't have a waywe don't have a way that we've learned so far to specify hey I would like all countries because that sort of peers on the first level. And then a list with these three numbers because I want any of tause I want any of these three. There is a way to do it, but we need a new tool here we use what's called index slice. So here the index slice we we open up the dot lock and where we're selecting rowswe're selecting rows instead of a list or a tuple here we're going to start by constructing an index slice. And we can tell this index slice that we'd like a colon for the first layer of the index ifyer of the index if you remember colon means all or everything when we're slicing in Python. So this tells this index slice says I want all values are all rows regardless of their value of the first lvalue of the first level of the index, but then I would like to restrict the rows where the second layer of the index is either 2005. Or 2007 or 2009. So now we get all four countries, but we only havies, but we only have these years and then we get back all columns because we have this comma all for the column specifier. So notice here that dot lock can accept up to two arguments the first one bents the first one before the comma specifies the rows the second one after the comma specifies the columns. We see the colon here in two places first it's seen all values on the first layer or the courst layer or the country layer of the index are acceptable and the second usage is to say we would like all values or all columns are also acceptable. Here's that in words. So now we have another exerwe have another exercise that we'd like for you to do. I'll go ahead and pause here I'll let you read through the exercise you can work through it and then we'll come back and we're together okay let'e together okay let's pause now. Okay welcome back here in this exercise we'll begin by creating another version of our WDI data frame, but this time we're going to set year as the first layer of thefirst layer of the index and country as the second. We're then given three different data extraction operations for the WDI data frame and what you're asked to do is to use index slice to get the samslice to get the same data out of WDI to so let's start with the first one here we're getting all data from the United States. Can do this WDI to dot lock we need to use index slice here because we wae here because we want all the years but we only want the United States as the second one. And then we'll get all the columns and if we run this we'll get back very similar data frame here we're goingame here we're going to have. 2017 and all the columns. Next we would like to get back these six rows for either the US or Canada for these three years. So now here what we can do is we can actually gis we can actually get this one without using. Next slice so we can do WDI to dot lock. We can pass the years first. And then we can pass a list of countries. That's that we want all columns we'll getll columns we'll get back again a data frame with the same observations we'll still see that these index levels are swapped so the printing looks slightly different but the data is the same. Finally tthe same. Finally this third example we would like. For each of the 17 years for both Canada and the United States. Get that using our second one we would do we have to use index slice here. We wantslice here. We want all the years we want a colon for the year level of the index and we want just the United States and Canada for giving me I didn't mean to press enter there. Canada and then we wounada and then we would like just the GDP column. Here again we're going to get back the same values the printing's different. Because the order of these index levels is different but we got back the sut we got back the same 34 numbers. I hope you had a chance to experiment and play with the index slice and that you understand how that helps us. Okay so we've been working with these hierarchical orhese hierarchical or multi indices on the row labels or in the index but we can also have it on the column index so what we're going to do here. This will take our WDI data frame and we will swap thend we will swap the columns in the rows. This operation comes from linear algebra and is known as the transpose and the way we write it is by doing a dot capital T after the data frame. So when we dorame. So when we do this now the index has just these five. Variable indicators this used to be the columns and now our columns have two levels on the outer most level we still have the country. Thise the country. This used to be on the far left of WDI and on the second level of our. Column names we have the year. What we can do is we can tell we can start extracting data we can tell pandas we woan tell pandas we would like all the variables that's this first colon just for the United States this was doable because country was on the outer layer of our column indices here country was the firscountry was the first level of column indices. We are not as also just like we saw with the United States on the rows because we want only data for the United States and we want all of it the year isl of it the year is now the only level of index for our columns. We didn't need that second layer to identify the country because we know that this is only data for the United States. If we wanted toes. If we wanted to get both the US and Canada we could pass a list here and notice that we get countries both the US and Canada. And the same types of rules that we learned for extracting rows will wtracting rows will work here so in this example we're going to get all the variables and then we will have a tuple. Which tells pandas to expect the first item to apply to the first layer of the indext layer of the index and the second item to the second layer here we want all columns. Where the country is either United States or Canada and the year is 2010 so we should get back something that isk something that is five by two. All five variables for these two different countries in 2010. Here's another exercise for you to try. I will go ahead and pause here while you attempt that and then wempt that and then we'll regroup in a minute. Okay welcome back. Here what we're asked to do is to use this transposed WDI data frame to get all data for all countries in years 2010, 2012 and 2014. So, 2012 and 2014. So here we would do WDI transpose dot lock we're going to get all the variables. We'll do index slice and we'll put a colon in the first position this represents that we want all counhat we want all countries. And then we'll do a list in the second position note of telling pandas that we would like only rows or sorry the columns. But the year is equal to 2010, 2012 or 2014. Forgot2012 or 2014. Forgot a comma right here and here we go we get all five variables and we only have these three years but we have them for all four countries. And there's a nice symmetry between how weetry between how we can use these indexing rules for a multi-level column or multi-level row data frame. So we've talked about how to set the index but one of the other key operations when we're dealions when we're dealing with the index is to reset it. And when we call the reset index method when we and we don't pass any arguments the following happens we will see that the columns that were previumns that were previously used for the index are returned back to be columns alongside the existing ones. And the index is going to be reset to go from zero one to all the way through the total numberugh the total number of rows and the data frame minus one. This is the default index also called a range index in pandas and when we call reset index again whatever we had there is move back as a columove back as a column and then we get back the default range index. So there are a few variations of behavior with the reset index method and we'd like for you to do this exercise now to learn what tnow to learn what these variations are from the documentation of the method. So we'll pause at this time for you to work through this exercise and then we'll regroup in a minute for us to work througor us to work through it together. Okay welcome back we'll go ahead and start this exercise together. So the first hint is that we should use the. Accummentation string for reset index to understand hndex to understand how it works so when I do the WDI dot reset index and a question mark the Jupiter notebook opened up this help window. If you're in Jupiter lab or different environment you might haronment you might have seen something slightly different but this same content should be everywhere. We'll see here that there are a few arguments one is called level and drop and these are the ones tthese are the ones that will focus on at this point. So first the level argument says that we should only remove given levels from the index and this could be specified by an integer a string or someer a string or some tupler list of integers and strings. By default if we don't pass anything or remove all levels of the index so let's use that to see how we can remove just the year so if you do WDyear so if you do WDI dot reset index. We pass as the first argument or level as year what we see is if the country stayed on the index but the year was moved up and was made a column alongside the exumn alongside the existing ones so this satisfies the first. Part of the question. So now the second part of the question says that we'd like to throw away all levels of the index. Turn the looking atTurn the looking at the documentation and we'll look at this drop method or show you this drop argument here it says do not try to insert the index. As columns this reset it to the default so if we we default so if we were to run this they would not be inserted as columns that sounds like just what we want because we'd like to throw away the levels let's try this WDI dot reset index drop. Here weindex drop. Here we'll see that we do get this default zero through n minus one on the index but now country and year are nowhere to be seen they have been removed from the index and dropped from theand dropped from the data frame entirely. The third part here asks us to combine these two we would like to remove country from the index but keep year and then we don't want to keep country as a coluep country as a column. So here we can combine these two things that we've learned WDI dot reset index. The level that we would like to reset entry. And we like to drop it we don't need to keep it aroneed to keep it around. When we do this we still get the year on the index but now instead of moving country up to be another column it's just completely thrown out of the data frame we no longer havame we no longer have country information. We wouldn't necessarily want to do any of these operations but it's useful to know how just like you can set the index you can also reset the index. So as wethe index. So as we close our discussion on the index we will kind of leave you with a few parting words of. Best practice and suggestion for how to do that and the question that should come to yourshould come to your mind is we've seen the index being important. And now the question becomes how do we pick the index how do we feel or know that we have the right columns on the index. And there isindex. And there is some belief on on what is a deep a good default value or a good default answer to this question and. To explain that we're going to look at. Description of what had the weak am at had the weak am a very popular data scientists in the our community. We're first to as tidy data and the first two components of his definition of tidy are that each column should have only one varid have only one variable in it and that each row should have one observation. Sounds fairly simple but you'll see how this helps us with the index here pretty soon. If we're striving to have a tidy dang to have a tidy data which makes a lot of forms of analysis easier so it's a great default. Then when we choose the index we should make sure that the row labels are sufficient to uniquely identifyo uniquely identify an observation. For our column or sorry for our WDI data frame. This unique way to identify an observation would have been the country and the year. And then the column names shoule column names should be specific enough to identify one single variable. Again in our WDI example this was any of the components of GDP consumption government expenditure imports exports or GDP. Let'exports or GDP. Let's think about another example suppose we have date on interest rates. Each column might represent one. Asset one different bond one different term structure for debt. And then on tdebt. And then on the rows we might have the date or the time and we would keep track of in this data frame how the interest rate evolves over time. The reason we chose the rows. To be time was thatTo be time was that it allowed us to think through and identify an observation as what was the interest rate on a particular date. And then putting the different assets or debt as columns allowed us tcolumns allowed us to identify them as separate variables. So the notion of. Keeping everything in a two dimensional form where we have a row label and a column label might seem a bit limiting at firsbit limiting at first because there are many forms of data. That typically require more than two dimensions for example if you had an image or a picture. You would have a two dimensional grid of pixelsional grid of pixels and then at each of these two dimensional points. You would have a third dimension that represents the color saturation in red, green and blue. So inherently one natural way to rone natural way to represent this would be. As a three dimensional object one for the pixels going up and down the picture the second dimension going left and right and the third dimension going intoimension going into the color space. Well, we could represent this in pandas in a data frame by using a hierarchical index. One thing you might choose is to put both the. horizontal and vertical pixell and vertical pixel coordinate on the index and then have the columns be the red, green and blue pigment values. In this way we're still able to keep it in a tabular. Explicitly two dimensional formwo dimensional form but because we have this notion of the hierarchical index we're able to represent a three dimensional data set. This example could be extended to more and more dimensions if we jusdimensions if we just add extra layers to either the row index or the column of index. One of the main. Points we'd like to emphasize when you're trying to organize your data is that you really need tat you really need to understand the problem you're trying to solve. The quote correct. Labels for your data will often depend on the problem at hand. So for example suppose we wanted to study how theted to study how the GDP and consumption evolved over time for different countries. Well, in this case we would want both time and the country to be on the index. This is what we saw earlier with theaw earlier with the WDI data frame. However, if instead of looking over time I was more interested in looking at differences across countries. At a particular moment in time I might choose to put thet choose to put the country invariable on the index and have the year be the column labels. This allows me to think of all the observations for 2010 for example as a variable and I can quickly do compcan quickly do comparisons row by row between different countries. The last party wisdom will leave with you is that following the tidy rules above and just thinking about what you would like to accou would like to accomplish with the data or how you intend to use it. And a little practice with setting and resetting the index will help you to consistently get the correct index that makes your anathat makes your analysis as easy as possible." metadata={'source': 'transcripts_tiny/2.2.1 the pandas index.srt'}