1
00:00:00.000 --> 00:00:44.000
Hello. This is Spencer Lion and in this lecture we will be learning about how to share the results of our research and analysis. So, agenda or outline for this lecture is follows. We will first talk about the purpose we have in sharing results. We'll call this the introduction. We'll then focus for a little bit on how we can share Jupiter notebooks in a variety of ways. And then we'll talk about interactive shape. The section on Jupiter notebooks will cover how we can share a static representation

2
00:00:35.000 --> 00:01:25.000
shape. The section on Jupiter notebooks will cover how we can share a static representation of our analysis. And when we say static we may not connect it to a running Jupiter kernel. So, no code can be executed by a Python or the language of our notebook. And then the interactive section. We will learn how we can actually have live feedback from the user on a website. A trigger code to be executed in Python. And then results sent back to the user's website. So, it becomes an interactive app. As we've been learning tools of data analysis and computation,

3
00:01:20.000 --> 00:02:03.000
As we've been learning tools of data analysis and computation, we are becoming researchers and data analysts. As a researcher or data analyst, we're called knowledge workers. This means that our primary source of capital is knowledge information or data. One primary responsibility of at knowledge workers have. And especially those who work with data is to be able to use the information we have access to. In order to assist a decision making process. In order to be effective in a system of process like this, we need to do

4
00:01:57.000 --> 00:02:47.000
In order to be effective in a system of process like this, we need to do we need to both perform analysis as well as have effective communication of our results. Being able to effectively communicate at the output of our analysis and work is absolutely essential. Without effective communication, the work we do will have little to know in back. In order to be effective at communicating our results, we need to decide a number of things. First, we need to determine who our audience is. This is sometimes a broad category, such as the public at large. This would be for

5
00:02:38.000 --> 00:03:22.000
This is sometimes a broad category, such as the public at large. This would be for anybody that's on the internet, for example, to be able to consume the output. This might be writing to a particular body of research. Maybe we have a paper or some analysis in a particular field. And we would like to present our work as a novel contribution to the field. And so we're really reaching out to an audience of our peers in order to demonstrate the new insights we've gained through our work. We may have an audience be a client if we're working on a data project in the private sector.

6
00:03:17.000 --> 00:04:02.000
We may have an audience be a client if we're working on a data project in the private sector. They may or may not be technically inclined, so we'll have to be careful to tone both our language as well as the types of rich output we show, the at tables, numbers, charts, etc. So that the audience that will is supposed to receive our analysis will be able to understand it. Then after we really understand who our audience is, we need to be able to determine what the content should be. Or one audience, they may want just a few summary paragraphs and a chart or two.

7
00:03:54.000 --> 00:04:35.000
content should be. Or one audience, they may want just a few summary paragraphs and a chart or two. However, for this may be suitable for the broad audience that is the public. However, if we are publishing a paper and some of the work we're trying to show is in, for example, a technical appendix. We will need to show in great detail various algorithms and derivations, as well as the code and results. In this case, the content would be much more than a few summary paragraphs chart. Finally, after we've identified who we're speaking to and what it is

8
00:04:26.000 --> 00:05:18.000
summary paragraphs chart. Finally, after we've identified who we're speaking to and what it is we're supposed to say, we need to decide upon a medium or a technology or convey our insights and information to our audience. These could be some standard technologies such as a PDF document or other data document, on one end, or could range all the way to the other end as a full-blown interactive web application or API for others to interact with and consume in their own research and work. But in order to be effective at communicating, we need to identify these three key components.

9
00:05:08.000 --> 00:05:59.000
and work. But in order to be effective at communicating, we need to identify these three key components. Let's take an example. I have this class we've been working on together. We as the instructional staff have made a decision to distribute most of the materials for this course as Jupiter Notebook, coupled with three recorded videos. Why? Well, our audience is you, fellow data enthusiasts and researchers and data workers, who are capable of downloading, opening, and utilizing a Jupiter Notebook. We chose to give you the Notebook in its raw and original

10
00:05:52.000 --> 00:06:36.000
opening, and utilizing a Jupiter Notebook. We chose to give you the Notebook in its raw and original form so that you can follow along, make changes, really dive in to how we do certain things and provide you the full content of our lectures. An alternative could have been to present a PDF version of our slides and distribute those. But that would have come at the limitation of not being able to interact with code examples, change them, and re-run them. So for our particular audience, this made sense to distribute as the full Jupiter Notebook. Another important factor that went

11
00:06:27.000 --> 00:07:09.000
this made sense to distribute as the full Jupiter Notebook. Another important factor that went into our decision was the type of content we needed to display. We knew that we would need to write some text that needed to be formatted. We have a number of equations or other rich formatting like the list or italic or both content. We also knew that there would be a heavy portion of computer code, specifically in the Python language, for this part of this course. And in addition to seeing this code, we also wanted to be able to show and display the results or the output of that.

12
00:07:02.000 --> 00:07:54.000
this code, we also wanted to be able to show and display the results or the output of that. And then finally the medium that we would use would be our Jupiter Notebook and the technology we used to distribute it was the co-cook derver of where we are hosting materials. In order for, and then the other part of our delivery was the pre-recorded video. We did this for a number of reasons. First, as we are teaching remotely and unable to be in person, we felt like having an opportunity to have high quality and polished materials,

13
00:07:47.000 --> 00:08:31.000
we felt like having an opportunity to have high quality and polished materials, be a recording beforehand, the ability to edit, could increase the likelihood of student success. Second, the other reason, another reason for using videos is so that you could have them to refer back to and rewatch as you're reviewing the materials from the lecture. As we don't have as easy access to things like in-person office hours. And then third, the final reason is a technology limit where we did not want to be reliant on a live and high integrity internet connection

14
00:08:24.000 --> 00:09:07.000
where we did not want to be reliant on a live and high integrity internet connection during the entirety of each of our lectures. If for some reason we can't connect via video conferencing, you would still be able to consume the lecture material through the video. Let's now talk about how to share Jupiter Notebooks. There are many options available to us for sharing a Jupiter Notebook. This is one of the things that gives the Jupiter Notebook or that makes the Jupiter Notebook such a powerful tool. Not only is it flexible in the types of input

15
00:08:58.000 --> 00:09:41.000
or that makes the Jupiter Notebook such a powerful tool. Not only is it flexible in the types of input and content it can represent, but it's also very flexible in how the content and results can be distributed. We will cover a few of the main ways for sharing Jupiter Notebooks here in this video. And then offers some suggestions and advice or which form of distribution you may choose based on your audience and content. After discussing the why we would pick one option over another, we will show an example

16
00:09:31.000 --> 00:10:23.000
and content. After discussing the why we would pick one option over another, we will show an example of how to use that particular method of distribution. First, we would recommend being able to share Jupiter Notebook via GitHub. GitHub is a web service or website that provides both remote Git repositories as well as collaboration and sharing features. As we know, a Git repository is a folder that sits when we're working with it on our computer and is managed by the Git version control system. Git is used to keep track of changes to each of our files

17
00:10:15.000 --> 00:11:00.000
and is managed by the Git version control system. Git is used to keep track of changes to each of our files at a history of checkpoints that we choose to keep track of. Typical workflow when using Git would be to add a feature or make a change to some analysis or report and then create a commit or saved version of our work at that moment in time before we begin on the next step. And if we do this regularly, we will end up with an entire history of how our analysis and work evolved from the start all the way through at the present time.

18
00:10:56.000 --> 00:11:38.000
work evolved from the start all the way through at the present time. This is how we would use Git on our computer but we may also want to use Git either on a different machine or with other people and that's where a service like GitHub would come into play. After we've made the changes to our files on our computer, we can then push the Git commits to a web resource like GitHub where they can be shared either publicly or privately with others of our choosing. GitHub has become the home of millions of the most used open-source

19
00:11:27.000 --> 00:12:17.000
others of our choosing. GitHub has become the home of millions of the most used open-source projects in the world. There are many, many projects such as Python packages like pandas and map plotlib that we've used as well as other analyses, technical appendix, source for papers and so on. One benefit of using your of using GitHub within your Git workflow is that you're able to go to the GitHub website and view the contents of your repository. When you do this and you view the contents of your repository, the files on GitHub will be rendered

20
00:12:10.000 --> 00:12:52.000
When you do this and you view the contents of your repository, the files on GitHub will be rendered quite nicely. You may have some markup in a Markdown file. Instead of seeing the raw text when you visit the Markdown file on GitHub, you will see a nicely formatted version and rendered version of that file. The same goes for you but are no books. So when you go and you visit or browse or repository on GitHub, you'll see syntax highlighting for code, images, will display natively, you can open PDFs within GitHub and you can also see a fully rendered Jupyter notebook

21
00:12:46.000 --> 00:13:30.000
you can open PDFs within GitHub and you can also see a fully rendered Jupyter notebook right within the GitHub interface. Let's take a look at an example of what this looks like. Through this, I will leave full screen mode and create a new tab in my web browser. I will then go to GitHub.com and just have and as I'm already logged in, I'm greeted with my default homepage. Let's go ahead and look at this first repository here called dataframe.jl. Once I'm here, you'll see that this file is called readme.nd

22
00:13:22.000 --> 00:14:06.000
called dataframe.jl. Once I'm here, you'll see that this file is called readme.nd and this is a markup file in the Markdown formatting language and this is not the true raw representation. This is the nicely formatted one we mentioned before. I'll go to click raw. Now I will be taking to a page that contains the actual code or the markup this file. You'll see here that it has the same contents. There is tools for working with tabular data in Julia, followed by installation, documentation, reporting issues and computing. Back off back, I'll see that I have the same content here,

23
00:13:59.000 --> 00:14:47.000
documentation, reporting issues and computing. Back off back, I'll see that I have the same content here, but it's rendered quite nicely. Let's go back out again and let's move to the repository that the instructor has been working on for parts of this class. I'll go here and I'll navigate to one of these lectures on webplotting. When I go here, I click on a notebook, but I see is after this loads is a nicely formatted version of all of our notebook. We'll see here that we have the rich text. Here's a header, the monospace font link. We also have code cells. These are

24
00:14:38.000 --> 00:15:23.000
the rich text. Here's a header, the monospace font link. We also have code cells. These are going to be in the monospace font with the code cell background and the syntax highlighting. This particular notebook has been stripped of all of its outputs. We won't see those here. If we navigate to a different repository, we could see what the rich outputs may look like. This particular repository is some machine learning tools that integrate and us. We'll look here in the examples and we'll open up one of these

25
00:15:19.000 --> 00:16:03.000
and us. We'll look here in the examples and we'll open up one of these final books, Cborn 1 distribution. Now we see here that in addition to the code, we have some outputs. This is a table and it is how Canvas data frames are rendered. And then we can see a number of charts that throughout this file. Now if we were to have run the codes and Dave the results for the notebooks for this course, we'd be able to see them output it like these are. This all comes quote for free when we use GitHub as a means of sharing our resources.

26
00:15:55.000 --> 00:16:51.000
This all comes quote for free when we use GitHub as a means of sharing our resources. Now we will talk about why we might share Jupyter notebooks on GitHub. There are two main reasons that we have found we like to share in notebooks. One would be to collaborate with others. Often we are doing analysis as part of a team or group of coauthors. And in this setting, our audience for wanting to share our communicate our results would be the colleagues or coauthors we are working with. Second, are the content for this particular group? Would be the research code,

27
00:16:45.000 --> 00:17:24.000
Second, are the content for this particular group? Would be the research code, documentation for that code, or maybe some examples or experiments that we've been trying. In each case, having the code be in the medium of a Jupyter notebook and shared via the GitHub technology allows us to easily transfer or share all of this content with the right audience so that they can also help and contribute. If we were in some stead, sending back the PDF file and asking feedback, it would be difficult for our colleagues to edit

28
00:17:17.000 --> 00:18:00.000
sending back the PDF file and asking feedback, it would be difficult for our colleagues to edit that PDF file or make changes using GitHub stillitates a back-and-forth collaboration. The second main reason we may want to share our code, Marju Bittano books on GitHub, is to share with a public audience. GitHub is a very popular and well-known and often used site. And hosting our content there may allow us to get some publicity or some extra viewers of our content that we may not pick up via other sharing technology.

29
00:17:55.000 --> 00:18:40.000
extra viewers of our content that we may not pick up via other sharing technology. The type of content that we share most often would be reports, maybe an appendix to a paper, or even class course materials, if the learning materials that we develop, we often share them publicly on GitHub. Let's do an example of how we could share some resources on GitHub. We'll share one of the notebooks we've been through in this course, all of the ones statistics too, that IPI and B. Let's first start a Jupyter notebook server and take a look at this

30
00:18:31.000 --> 00:19:21.000
too, that IPI and B. Let's first start a Jupyter notebook server and take a look at this notebook to remind ourselves of the content. We won't go over it in detail, but we'll most of look for the features contained in the notebook. What I'll do is I'll navigate over here to my terminal and I will start a Jupyter notebook. I'll run a Jupyter notebook. I'll first navigate to the repository and we will go into this. So now we will run Jupyter notebook now that I'm in the correct directory and we will be taken to this landing page for

31
00:19:13.000 --> 00:20:07.000
notebook now that I'm in the correct directory and we will be taken to this landing page for the Jupyter notebook. I'll then click to open the notebook we'd like to share the 0.1 statistics too. And we'll take a quick look. So we have here some text, some code, we have a lot of math, and we have some code output. As text, we also have some output that is some charts. Here's a chart, that we've output. It looks like there are a handful of other charts. And there's even one place in here where if we were to run the code right now, we would

32
00:20:00.000 --> 00:20:49.000
And there's even one place in here where if we were to run the code right now, we would see that there were some interactive widgets. So what we'll do is we will go and we will run all the cells above so that we can see what these interactive widgets did. So we see here that we have in blue a histogram of test scores on an exam in a class and we have in orange a truncated normal distribution where we have sliders that allow us to change the mean and standard deviation of the distribution and we can kind of get a sense or a feel for what the parameters

33
00:20:41.000 --> 00:21:33.000
deviation of the distribution and we can kind of get a sense or a feel for what the parameters of best fit might be to capture this distribution. That looks like that's all the types of outputs. So now let's work on getting them on to get have. So the first thing I'll do is I will go to get hub.com and I will create after I've signed in, I will create a new repository and I will call this test, do better shape. I'll allow this to be public and I'll press create. Now what's here I have a couple options. What one option would be to use the command line

34
00:21:22.000 --> 00:22:13.000
Now what's here I have a couple options. What one option would be to use the command line to upload this file, which I will show you how to do over here. We'll go back to our terminal and I will close down this server. I'm going to move to an empty folder on my computer and I will clone the repository you just created. So where this isn't a lecture really on get. So if you're not following this, we're going to talk about the second way we can upload our result. So here we're going to now go into the get repository that we just cloned. We can copy over

35
00:22:07.000 --> 00:22:56.000
So here we're going to now go into the get repository that we just cloned. We can copy over the materials, the notebook that we would like. Now into this directory we'll see here, try checking get status. That we do have one new file. We can get add, these are the one and get the net and add it first notebook. Then finally we can get push. So what just happened was we created a new commit on our computer and pushed it to get help. If we refresh this page, we'll see that our file has been uploaded.

36
00:22:51.000 --> 00:23:33.000
and pushed it to get help. If we refresh this page, we'll see that our file has been uploaded. If we click it, we can see that get hub will render the contents of our notebook in a nice way. We see here that we still have the format of text. We can see our code that we wrote. We can see the math that was written and rendered here and we can even see some charts. So here is one of the charts and we can see a few more. I don't think that we're missing is that interactive cells. So we look here and this is where we had the two widgets, one for the

37
00:23:27.000 --> 00:24:08.000
is that interactive cells. So we look here and this is where we had the two widgets, one for the mean and one for the standard deviation. And we see that on get hub, this is just empty. The reason for this is that there's two main reasons. One, the rendering of these sliders created some interactive elements on our web page that needed to use what's called JavaScript in order to be interactive and then to have some computation attached to them. Get hub does not allow you to render JavaScript inside of a notebook. So it removes that

38
00:24:03.000 --> 00:24:41.000
Get hub does not allow you to render JavaScript inside of a notebook. So it removes that functionality and then the second problem is every time the slider moved our Python code needed to run again in order to construct our plots. On get hub, there's no Python process or no kernel that's connected to. So there's no way it could update and be interactive. So the outputs missing because JavaScript was removed but even if it was there, it would be totally static. The sliders would be kind of disconnected and you may be able to

39
00:24:36.000 --> 00:25:19.000
it would be totally static. The sliders would be kind of disconnected and you may be able to move the sliders but the plot would not change. The reason the plot would stay the same is there's no Python process provided by get hub that would be able to update the plot in response to the new slider value. Now if you're not comfortable or familiar with using the command line, but we'll get you can go to you can actually upload vials manually here. So I could go and I could click add file and I can go click on upload files and when I upload them, this tells me I need to

40
00:25:11.000 --> 00:26:06.000
click add file and I can go click on upload files and when I upload them, this tells me I need to drag the files there to add that. So I will do this and I will just make a copy of this file and I'll call this actually we're not going to do that. We're going to look at that. What we'll do instead is we'll just create a new file. We'll do you want to add a moment a lot, right? Okay so what we've done is we created a second file called readme.md and we said the contents of that file is just the string this is a test repository, your test repo. I'm going to open up my file browser

41
00:25:58.000 --> 00:26:41.000
file is just the string this is a test repository, your test repo. I'm going to open up my file browser this is just the native browser for my computer. So let's see all the files and we'll see here in this folder test to put our sharing, sorry if the file font is small. But we're in the test to put our sharing folder. The notebook we worked on previously is here and the new file we just created is right here. We could upload this using the get command line instructions we saw before or if we're not comfortable with that we can just drag from our computer onto the website

42
00:26:34.000 --> 00:27:20.000
or if we're not comfortable with that we can just drag from our computer onto the website the files we like to update. And here it says that the readme.md file kind of ready to be added. And now I need to commit the changes. So here I'll say I added readme. Yeah, file up over. Once I click commit I'll be then taken back to my repository. And now you'll see here that in addition to the notebook we uploaded we have a second file readme.md. Now it is a standard and get hub that when I visit any folder or any repository the contents

43
00:27:14.000 --> 00:27:59.000
Now it is a standard and get hub that when I visit any folder or any repository the contents of the readme get rendered below. So we see here that this is the file readme.md and here is the contents that we wrote. So we could either upload via the get command line or we can choose to click the add file either create right here or upload them directly. The next method of sharing. The next method of sharing Jupyter notebooks we'll talk about is called Quant Econnodes. Quant Econnodes is a free online service from the Quant Econteen

44
00:27:54.000 --> 00:28:38.000
Quant Econnodes is a free online service from the Quant Econteen or sharing and distributing Jupyter notebooks. The purpose of the notes project is to be a library of high quality notebooks on a variety of topics that are related to economics or computation. The notebooks on the notes website can execute some JavaScript, which means that they are allowed to have JavaScript embedded plots like those from an Altair plot or plotlet. In addition, other users of the note system can give thumbs up or down to the notebooks,

45
00:28:29.000 --> 00:29:15.000
In addition, other users of the note system can give thumbs up or down to the notebooks, providing some minimal form of feedback or a way to measure the popularity of a notebook. And also the note system supports commenting on notebooks in order to facilitate a discussion around the content of the notebook. Let's take a look at what the notes project looks like. So we'll go here and as I'm signed in, you can see up here. Here's my icon, my logo. And then you'll see that there are a number of notebooks from

46
00:29:11.000 --> 00:29:49.000
Here's my icon, my logo. And then you'll see that there are a number of notebooks from different authors. And if we click on any of them, we'll see that here is the ability to write thumbs up or thumb down for this particular notebook. Here is a type, sorry, title, that the author here, John's Cherski, gave for this notebook as well as a description of what the notebook covers. And now we see that we have a nicely rendered Jupyter notebook. You'll see that relative to what we saw on GitHub or inside the Jupyter notebook itself.

47
00:29:44.000 --> 00:30:31.000
You'll see that relative to what we saw on GitHub or inside the Jupyter notebook itself. We have a little bit more style applied to the fonts and typography. The links here are orange to be consistent with the theme on the note site. But we still are able to see code and outputs just as we would with our other Jupyter systems or format. Let's look one more to see the other types of outputs that are possible. Here we see some charts, some 3D graphs, more math. Here's a tree that was generated or rendered.

48
00:30:20.000 --> 00:31:17.000
Here we see some charts, some 3D graphs, more math. Here's a tree that was generated or rendered. And so on. Now we'll return to our presentation on our notes. So why might we want to share on quantity kind notes? And really the other way to ask this question is who would the audience be and what would the content be in order for us to choose to share on quantity kind notes rather than some alternative technology? The main audience for quantity kind notes is the research community in academic in economics. The content that these notebooks

49
00:31:07.000 --> 00:32:01.000
kind notes is the research community in academic in economics. The content that these notebooks contain are academic facing content like an appendix or an explanation or an example that either demonstrates a concept for instruction or an example as part of a paper or a research project. The content should have something to do with computation or economics. And because this is who the project is for. Let's see an example of how we might share our statistics notebook on quantity kind notes. So I will create a new browser tab that will go to note.com.com.org.

50
00:31:50.000 --> 00:32:37.000
on quantity kind notes. So I will create a new browser tab that will go to note.com.com.org. And I'll be taken back to the landing page. Because I'm signed in, I have the option to submit a notebook. And here it says I came drag and drop a notebook or I can click in order to find notebooks on my computer. You'll see here if the font is not too small that I am in the test Jupiter sharing folder that we were working with previously. And I have this V1 statistics to notebook. I'll click open and this will be uploaded here to the site.

51
00:32:33.000 --> 00:33:12.000
notebook. I'll click open and this will be uploaded here to the site. I'm going to put statistics as the title of the notebook. And if I wanted to make sure that I'm uploading the correct thing, I can also click preview, which will open up a modal window the preview of our notebook. This does look like the correct notebook. Here are some of those charts we were seeing. So I'm going to go ahead and close this preview and fill out the rest of this form. Now they'd like you to select some topics that will make sorting and identify notebooks a bit easier.

52
00:33:05.000 --> 00:34:01.000
Now they'd like you to select some topics that will make sorting and identify notebooks a bit easier. Here this is a notebook about statistics, which is most closely related to the feel of a econometrics. But I'll also click other just in case. This is a notebook under your name base at the front side. Just go ahead and click. I can then click that I agree to these terms and conditions and submit. So when I do this, if I want to discover or if I want to sort by the date, I will see this notebook is the most recent one published on the site. And if I click it, I can see the notebook we've

53
00:33:55.000 --> 00:34:37.000
is the most recent one published on the site. And if I click it, I can see the notebook we've been working with. We'll see that all the math here is rendered nicely. We have our charts that are showing up without any problems. But one thing again that we'll see is we don't have our interactive GUI. Now the reason for this is not an issue with JavaScript, but it's the issue that there's no live Python kernel hosted by the quantum economics project. So there's no way for this sell to be updated because there's no Python kernel connected.

54
00:34:31.000 --> 00:35:17.000
sell to be updated because there's no Python kernel connected. Now that this is here, other users can view it. And there's also at the very top here, an opportunity for people to comment on my notebook and I could then respond to the comments. So if I go back out to the beginning, I can click on a notebook. This one by John has a few comments to it and we can go and kind of see what this discussion looks like. And now this is a social way for us to have some back and forth with other professionals in our field.

55
00:35:12.000 --> 00:36:01.000
for us to have some back and forth with other professionals in our field. I'm sharing a static version or non interactive version of a Jupyter notebook that we'll talk about is the NBConvert tool. NBConvert is a tool from the Jupyter team who enable the conversion or export of a Jupyter notebook to other file type. NBConvert is a pip installable Python package that must be installed on your local computer and then you will run it from the command line. NBConvert and invert your Jupyter notebooks into many different file types such as a PDF,

56
00:35:52.000 --> 00:36:42.000
line. NBConvert and invert your Jupyter notebooks into many different file types such as a PDF, a standalone HTML or web page, a slideshow, a latex document, and more. Why might you share with NBConvert or who read your audience beat and what might the content be? The audience is very broad for NBConvert. It could be anyone public or private, but the main condition is that they need a static single file version of your notebook in order to consume it. The content that can be included can be just as diverse as the audience.

57
00:36:33.000 --> 00:37:28.000
consume it. The content that can be included can be just as diverse as the audience. NBConvert has been successfully used to create websites, to write books, reports, and other documents that will create it in Jupyter. NBConvert is an integral part of the Jupyter ecosystem, specifically when trying to use Jupyter for authoring documents. Let's see some examples of how we can use NBConvert. We're going to use NBConvert to share our document as a Python script, as an HTML page, as a PDF, as some slides that can be used

58
00:37:18.000 --> 00:38:02.000
our document as a Python script, as an HTML page, as a PDF, as some slides that can be used of an HTML or an web browser, similar to the slides we're looking at right now. In each case, we will use a command on the command line that looks something like this. It will read Jupyter and be Convert, and then we'll pass the name of our notebook and an argument saying dash dash 2 xxx where this xxx is a placeholder or the format we would like to generate. Let's switch back over to my terminal and give it a try.

59
00:37:59.000 --> 00:38:51.000
Let's switch back over to my terminal and give it a try. Here in my terminal, we can see that we have just the statistics file and the reading we created before. Let's now run Jupyter and be Convert. We're going to pass in our notebook and then let's do dash 2 Python. The convert to a Python script. Now, if we look, we'll see that in addition to the notebook we had, we also have another file that has the dot py extension. This is a Python file. We can open up a x-fideter in this directory. If you're

60
00:38:45.000 --> 00:39:41.000
We can open up a x-fideter in this directory. If you're open up Visual Studio code and if we open up this Python file, we'll see here that this is a Python file containing all of the code from our notebook. A few other of the features are first that we have all of the marked down or all of the text is included here as comments. Here we see all of the math and the equations that we wrote. Then also, we have here the comment for each code cell. Here it says in bracket 1, polling. This allows the Visual Studio code to recognize that these are cells of a Jupyter

61
00:39:34.000 --> 00:40:16.000
polling. This allows the Visual Studio code to recognize that these are cells of a Jupyter notebook. If we want to use if we have Jupyter configured properly, we can click run cell, and it will attempt to run this computation. I'm not sure if this will work. It may not have Python totally configured properly, but the using Visual Studio code is not a focus of this lecture, so we won't spend too much more time on it. But we do have a fully run-able Python script containing all the code from our notebook.

62
00:40:10.000 --> 00:40:53.000
But we do have a fully run-able Python script containing all the code from our notebook. Next we said that we would try to convert our notebook to a HTML page. So here we'll do two and we'll replace the Python at the end with HTML. Now when we check the contents of our directory, we have three files that start with B1 statistics too. We have the notebook that we shared with. The Python script we just looked at as well as an HTML file. We go back to our code editor. We'll see that this, if we open up

63
00:40:45.000 --> 00:41:31.000
as well as an HTML file. We go back to our code editor. We'll see that this, if we open up this HTML file, we'll see that there are a number of styling things added. We'll kind of skip through for a little while, but eventually we make our way all the way down. We can start to see some of the content for our notebook and jotted it's really far down. Okay, here we go. Here are some of the equations that we had. And I think if we look carefully, we'll be able to see some code. Yep, this believe it or not is actually the code. You'll see here we have variables like

64
00:41:24.000 --> 00:42:14.000
Yep, this believe it or not is actually the code. You'll see here we have variables like Mu hat 1 equals np.something. So all of this ugly stuff going on is how our web browser will be able to put nice colors on all the code. We'll take a look at a more or actually if we go back to our web browser that we were using for our slides, we can go here, make a neat hand and I will open a file and I will tell it to open this HTML file. And when I do that, we see here that we have a nicely formatted HTML version of our number.

65
00:42:05.000 --> 00:42:54.000
And when I do that, we see here that we have a nicely formatted HTML version of our number. We have all of the code. Here maybe is some of the code we were working with with all those crazy HTML elements in text. But we see plots. We see math. We see formatted text and code. You see output. And so after we've used nbConvert and we've been introduced in HTML file, we can either share this with a colleague, upload it to some web server somewhere and have it be available publicly. We also mentioned that we may want to convert to a p.k. Let's try this.

66
00:42:45.000 --> 00:43:33.000
available publicly. We also mentioned that we may want to convert to a p.k. Let's try this. By running this Jupyter and be convert command again and this time, passing dash dash to PDF. When we run this, going to do some work and actually ends up generating a PDF via the late tech program. If you don't have late tech installed on your machine, this will probably fail. I did have it. And we see here the output that the PDF was successfully created. And if we list the contents of my directory, we now see four versions of files starting with

67
00:43:26.000 --> 00:44:17.000
And if we list the contents of my directory, we now see four versions of files starting with V01 statistics too. Notebook HTML Python and now this new file is a PDF. If we try to open this file, my PDF browser on my computer will open. And now we have a PDF version of our notebook. We again have beautifully types at math. We have code that syntax highlighted for us with these code cell numberings before. And we have our charts. But we're missing again in this format as we were in all the other was this interactive cell. We don't even have a chart here

68
00:44:11.000 --> 00:44:57.000
format as we were in all the other was this interactive cell. We don't even have a chart here interactive things can't be rendered in these static versions that we've been using. But everything else went through. We have our links that were contained throughout the notebook, code inputs, outputs, math, and so on. Now the final thing that we said we would do was convert to slides. And then we can actually try this. We can do convert to slides. And you'll see here that the new version of this V01 statistics to file now has the extension dot slides dot HTML.

69
00:44:49.000 --> 00:45:46.000
that the new version of this V01 statistics to file now has the extension dot slides dot HTML. We go back to our web browser and we can try to open this. I'll go here, new tab, and I'll press open. And I'll go to this slides.html file. Now when I open this, we'll see here that we have a slideshow version of our notebook. We have math. We have formatted text. And if we go far enough, we will eventually find some plots. Let's see if we can see. Oh, it looks like in this exact, we're not going to see the plots because we'd have this

70
00:45:36.000 --> 00:46:32.000
Oh, it looks like in this exact, we're not going to see the plots because we'd have this scroll check mark. But there are settings. We could change that would allow us to scroll here. So this is, was it an example of how we use the NB convert tool to generate four different versions of our notebook. We have the HTML version. We have the slides that can be shown on the web. We have our Python script and we have a PDF. The sharing methods we've discussed thus far have all produced a static help. My static, we mean that there was no way for the consumer or the user of our outputs to modify

71
00:46:23.000 --> 00:47:15.000
My static, we mean that there was no way for the consumer or the user of our outputs to modify the contents of our analysis. The computations were done once beforehand and the outputs stored and reproduced in each of the output format. Now we will talk about how we may want to share our results in an interactive manner where our audience and users and make modifications or requests of our analysis and we can provide real-time feedback. Now as Python programmers we have many different options for sharing our numbers. We did talk

72
00:47:08.000 --> 00:47:55.000
Now as Python programmers we have many different options for sharing our numbers. We did talk through a lot of the static ones. Life, GitHub, want to condolts or by using NB convert to generate a file. Some of the other sharing formats are interactive. Here our audience will be able to provide input or tweak parameters. This will then trigger our code to be executed and then we can return new output. We'll now talk a little more about some of these interactive methods of sharing our work. There are many different methods or technologies for sharing our analysis interactively.

73
00:47:45.000 --> 00:48:41.000
There are many different methods or technologies for sharing our analysis interactively. The traditional method is to publish a package or library of our code so that others can download it or install it and then run our code on their own. By passing in various arguments or additional arguments or keyword arguments, the users or consumers of our product will be able to either replicate our analysis or do new things using our work. The standard way to distribute a Python library or package is by publishing it to the Python package repository of

74
00:48:34.000 --> 00:49:25.000
distribute a Python library or package is by publishing it to the Python package repository of IPy, built of py, py, py. Anything that is published here can be installed using pit. There is no necessary review period or acceptance to publish anybody is allowed to publish to this public space and it can be a quite effective and simple way to share the code behind your analysis. If you choose to share your work in this way, the main audience is likely to be other program. The reason for this is that you're sharing the code that you may have developed

75
00:49:17.000 --> 00:50:00.000
to be other program. The reason for this is that you're sharing the code that you may have developed as part of your project and in order to interact with this, you need to know how to program. The content of course would be the source code. You'll be able to take a look. Let's go ahead and look at the PyPy page so we get a little better understanding of what's there. I'll click this link and ask it to take me to a new tab and then I'll go there. So now here in the second tab, I'm on the PyPy page which again is the Python package index

76
00:49:53.000 --> 00:50:41.000
So now here in the second tab, I'm on the PyPy page which again is the Python package index and you'll see here that hosted on this site are 282,000 projects over 2.3 million releases 3.7 million files and these changes or projects were uploaded by about 1,5 million different users. You can see that there are projects that are recently downloaded, recently updated and we can even search for the Pandas page and we'll see here that we have Pandas 1.2.0. If we click this, we'll be taken to a description of the Pandas project.

77
00:50:36.000 --> 00:51:23.000
If we click this, we'll be taken to a description of the Pandas project. You can see the release history of all the different versions of Pandas that have been released. All the way back to version 0.1 on Christmas Day in 2009. You can see that the most recent as of this recording was just the day after Christmas in 2020. You can also have other statistics like the number of stars, forks and open issues or pull requests at the tab as well as some links to documentation or source code. Hi Pai is the dev acto way or standard for distributing and sharing Python code.

78
00:51:14.000 --> 00:52:06.000
Hi Pai is the dev acto way or standard for distributing and sharing Python code. Another option for interactive sharing of analysis would be to create an API. If our work or analysis led to the creation of a novel dataset, it may be likely that other programmers or researchers may want to be able to consume the data that we've collected or produced and use as part of their own analysis. A common way for sharing data like this would be to create an API. As we remember from our topics on web scraping and data collection, an API stands for

79
00:52:01.000 --> 00:52:49.000
As we remember from our topics on web scraping and data collection, an API stands for application programming interface and a web API is a way for it is a common standard for exposing data from one service to another. We in this setting, if we're trying to interactively share our results, we would be creating the web API and others would be using it. Again, here the audience is most likely to be other programmers because in order to interact with or connect to a web API, some knowledge of programming is required. There are other tools that you can use to

80
00:52:39.000 --> 00:53:35.000
to a web API, some knowledge of programming is required. There are other tools that you can use to explore data using web API's solution of that may be more broadly data consumers instead of only programming. The type of content that we can distribute through a web API includes data or images that are produced by our code. Finally, the last method of interactive sharing that we'll talk about here is an interactive application and we will talk about an application as a website that users can visit. There may be various widgets or toggles for the user to interact with

81
00:53:28.000 --> 00:54:13.000
that users can visit. There may be various widgets or toggles for the user to interact with which will then cause our code to be executed and results to be sent back to the web page itself. This audience is the most broad of the free we've talked about. This would be anyone who would like to consume our analysis. It could be other programmers looking to get a feel for what is possible with our code or it could be researchers or other academics interested in our studies. And finally, it could be more broadly anyone who happens to take an interest in our work.

82
00:54:05.000 --> 00:54:55.000
And finally, it could be more broadly anyone who happens to take an interest in our work. The type of content in the web application is typically going to be text, data or images that it's produced through our analysis. It is this third group of interactive sharing that we'll talk about here today. We won't talk about how to publish a pipeline or how to create web APIs, but we will talk about how we can create interactive applications that others can use in order to interact with our work. We'll first talk about the Voila package. Voila is a Python package

83
00:54:44.000 --> 00:55:32.000
to interact with our work. We'll first talk about the Voila package. Voila is a Python package that allows you to expose a Jupyter notebook as an interactive web application. Voila works by rendering the content of the Jupyter notebook as a website and then it connects this website to a live Python process for handling user input. This is different from the other web-based Jupyter notebook sharing methods we talked about before. Those other methods like posting to GitHub want eConn notes or exporting to HTML,

84
00:55:27.000 --> 00:56:10.000
Those other methods like posting to GitHub want eConn notes or exporting to HTML, we're all able to render the notebook as a website. However, they did not connect to the live Python process that could be used to execute code. Voila makes the website interactive by connecting widgets created inside of the notebook and then exposed on the website to a Python that updates can occur. Voila package is created by some of the core tributers of the Jupyter project and that is very tightly integrated with the Jupyter ecosystem.

85
00:56:04.000 --> 00:56:48.000
of the Jupyter project and that is very tightly integrated with the Jupyter ecosystem. Its key feature is the ability to use Jupyter notebook widgets that are created in your notebook from a web page. We'll see what this looks like here short. Why might we share with Voila? Well, the audience that we may target for this particular form of sharing could be the broad public, somebody that we would like to share our results with, and maybe particularly helpful for co-authors or colleagues who would like to see some of the

86
00:56:41.000 --> 00:57:26.000
and maybe particularly helpful for co-authors or colleagues who would like to see some of the examples that we've worked on. One common workflow that happens or occurs when doing research or other data analytics work is one person may do an experiment or try out a particular model and then team members or co-authors would like to be able to tweak or make alterations to that model or to that analysis and explore some of the different features. The Voila project makes this extremely easy and quite convenient.

87
00:57:21.000 --> 00:58:18.000
The Voila project makes this extremely easy and quite convenient. Now the type of content that we can put inside of a Voila project is anything that is in a Jupyter notebook that can benefit from being interactive. Let's see an example how we might share our statistics notebook using Voila. To do this we first will have installed the Voila package by running PIP install Voila. Once we've done this we can run from our command line Voila followed by the name of the notebook that we would like to execute. Let's now give this a try by returning to my terminal.

88
00:58:06.000 --> 00:58:54.000
notebook that we would like to execute. Let's now give this a try by returning to my terminal. We're here. I will clear out the old output and I will run the command. I indicated in our notebook or on Voila the serial one will pass the notebook file name. When I press enter here we'll see some initial output from Voila and it opened our web browser here on the right handpad. We'll see that this is the URL we can put into our web browser to oops they put it together to see the file and we'll see here on the right that we have a nice

89
00:58:48.000 --> 00:59:33.000
to oops they put it together to see the file and we'll see here on the right that we have a nice the rendered version of our notebook. You'll notice here that we're this looks slightly different than we've seen before. In the actual notebook right underneath the heading statistics continue we had a code cell where we imported packages like iPypthon or sorry map plot lib, numpy and panpantist. This code cell seems to be missing. If we scroll further down we'll see that we have a nice map output the formatted text and we'll even see here what looks like the print messages

90
00:59:25.000 --> 01:00:14.000
a nice map output the formatted text and we'll even see here what looks like the print messages that are code generated. So here we're seeing that we have the output of our code but not the code itself. The reason for this is that by default Voila chooses to strip or remove all of the code inputs so that what you're presented with on the web page is just the clean text and code outputs. One thing that we see in this formatted sharing that we haven't any of the others is we now have our interactive sliders. So here we can move the new slider for example and the chart updates

91
01:00:06.000 --> 01:00:52.000
our interactive sliders. So here we can move the new slider for example and the chart updates on the web page. If we move the sigma 1 we get another update. And so now for the first time in the sharing methods we've talked about so far we see that we have a fully interactive version of our notebook being shared inside of a web browser. We scroll down we'll see all the other outputs that we had. We have more math, more printed text and more of the chart. This is extremely powerful as you can imagine putting more than just these two widgets

92
01:00:46.000 --> 01:01:42.000
This is extremely powerful as you can imagine putting more than just these two widgets inside of the notebook would allow you to create some very powerful and flexible presentations or applications using Voila. Another form of interactive sharing. Python code and results is the streamlet library. Streamlet is a Python library that translates Python scripts into interactive websites. This requires 0 HTML, JavaScript or CSS and the output is a beautiful interactive dashboard or website. This is similar to the Voila project. However the input is a Python

93
01:01:30.000 --> 01:02:28.000
interactive dashboard or website. This is similar to the Voila project. However the input is a Python script created using a text editor instead of a Jupyter notebook. Also the interactive widgets are Python variables constructed with a call to a streamlet class instead of having to build out Jupyter widgets. Why might you share with Streamlet? Here the answer is pretty simple, broad and powerful. Your audience could be anyone in the public. It could be colleagues and co-authors similar to the audience use case we had with Voila or it could be more broad and it's just an

94
01:02:20.000 --> 01:03:10.000
similar to the audience use case we had with Voila or it could be more broad and it's just an opportunity to share publicly the features of your project. The type of content that you can display with Streamlet is anything that Python can generate which is just about anything and the main type of content that you would be seeking to share or communicate with others would be a put that can be interactively generated with Python or an interactive version of your Python scripts. We will look at an example of how we can transform some of the codes from our

95
01:03:04.000 --> 01:03:54.000
We will look at an example of how we can transform some of the codes from our e1 statistics to notebook into a Python script and then we will use that to create a streamlet application. Who can select our streamlet application? We will modify the script that was generated for us when we used MB convert to take our notebook into a Python script. We'll use our Visual Studio code editor to do this editing. So here we'll open back up the editor in this file and we will create one more file in this directory. We'll be 01 statistics to streamlet.py and then I will open the

96
01:03:42.000 --> 01:04:34.000
one more file in this directory. We'll be 01 statistics to streamlet.py and then I will open the MB convert Python script off into the right. First thing we'll do is bring over the dependencies that we use throughout the Jupyter notebook. Then what I'll do is I will copy over some of this text and instead of having it be a comment, if I have this be a stream without any without any assignment just a top level string streamlet will actually interpret this as markdown. Just how it was in the Jupyter notebook and we're rendering it on our webpage.

97
01:04:30.000 --> 01:05:20.000
Just how it was in the Jupyter notebook and we're rendering it on our webpage. One convenient thing that streamlet provides is a live and interactive view while you're editing. Let's see how this works. I'll open my terminal here on the bottom and I will type streamlet. Run, be 01, 6, 2, pretty in that.py. And now we'll say you can now view your streamlet app in your browser and I will click this URL and open up my browser. And you'll see here that the only thing on our page as of right now is statistics continued. So I will go back to our text editor

98
01:05:10.000 --> 01:05:57.000
page as of right now is statistics continued. So I will go back to our text editor and I'm going to rearrange things one last time. Now I'll actually stack these one on top of each other and to the left so that we can see the text that we're code here on the left, the output at the bottom and the streamlet app running on the right. Now let's test out the theory of being able to put markdown code in a string and have it be rendered. I'm going to copy this long version. Actually I'm going to start here at the new content in this notebook here about sufficient statistics.

99
01:05:49.000 --> 01:06:31.000
Actually I'm going to start here at the new content in this notebook here about sufficient statistics. And I'll continue to copy until I see code and copy all this text. I'll see if we can get it to show up our application. I'll paste this in and I'll go to the top. I will remove the comment and now I will add a wrap to the whole thing in the stream. Now when I save this you'll see here it says source file changed over here in my web browser and I'm going to say always rerun and what this will do is it will instruct the streamlet

100
01:06:25.000 --> 01:07:14.000
and I'm going to say always rerun and what this will do is it will instruct the streamlet to watch this Python file and anytime it changes it will update the website. Oops. This is telling me that I haven't paired. What does it say? Oh, okay. I think I need to make this a raw stream. There we go. So if the problem was I was you have the late tech code in here that has like a slash t or slash all the other things for the late tech and Python was trying to interpret the slash t for example as a tab and

101
01:07:08.000 --> 01:07:48.000
for the late tech and Python was trying to interpret the slash t for example as a tab and then there were other slash commands in our code. For example, we'll be this slash h that is not a proper what's called the mistake sequence. So Python saw the slash t and made it a tab and then it's lost something like slash h and didn't know what to do with it. And Python away around this you make a string in a raw form so that these slash commands are don't actually have. Now we'll see here that except for these block boats or the block map

102
01:07:40.000 --> 01:08:37.000
don't actually have. Now we'll see here that except for these block boats or the block map things seem to work. So let's go ahead and find one of these and I think the problem is we just need to wrap these with I should share sorry with dollars. See if we can get this one rendered. Nope, not quite. Okay, so we need to have dollar science and then we need to change the line star to align. So I'm going to go ahead and we use fs code to get all these. We'll change them to aligned. And now we're starting to see more broadly. There's just a few more of these equation groups down below.

103
01:08:32.000 --> 01:09:18.000
starting to see more broadly. There's just a few more of these equation groups down below. But you can already see that our streamlit version of this app is starting to take shape. Okay, now let's get to running some code. So we go down here and if we run this go ahead and we'll put in this code. That's just copy over directly this cell. And we'll see what the streamlit does with it. So nothing quite happened here. So the reason the problem is is when we print things they showed up in our console. In order to have streamlit show them,

104
01:09:12.000 --> 01:10:02.000
is is when we print things they showed up in our console. In order to have streamlit show them, they just need to be strings. So we'll go ahead and remove the pick-off and now they showed up here. Great, this is successful so far. And in the interest of time, we're not going to go through and copy the entire iPhone script. We'll just go through and show some of the interactive examples. So we'll define the functions that we're defined in jupiter for us. Here we go, copy over, you want. And we're going to continue copying.

105
01:09:54.000 --> 01:10:54.000
And we're going to continue copying. And I'm really trying to get to the point where we have the interactive thought. Is that what we're going to want to replicate here? Here we go, plot scores and then here's our interactive. So let's just test it out. So let's write the plot scores and then let's just try it once. Let's do plot scores. We need to pass in the test scores. A new, let's say a view of 300 and a standard deviation of say 100. Let's see what we get back. And that is that and now we can do the thing. And here we go. So we were able to again,

106
01:10:46.000 --> 01:11:31.000
And that is that and now we can do the thing. And here we go. So we were able to again, streamlit's main way of displaying things is, are one of the convenient ways to do it, is just to display a figure or try to display a variable or a string or something and not assign it. So if we just write big on its own line, this shows the map plot lib figure over here with an or streamlit application. Now the next step will be to have the view and the sigma be associated with a slider, like they were in the Jupiter version. To do this, we need to import

107
01:11:24.000 --> 01:12:08.000
be associated with a slider, like they were in the Jupiter version. To do this, we need to import the streamlit library. I'll actually jump back to the top of my final and I will say import streamlit. Now that we have streamlit, I want to show you one thing and then we'll work on the slider. So the first thing is that in addition to just writing a variable out like this, we can write streamlit.write and this function can be called from anywhere and the big and the corresponding variable or value will be displayed properly in the website. To show that the figure is coming from

108
01:11:59.000 --> 01:12:44.000
variable or value will be displayed properly in the website. To show that the figure is coming from this streamlit write command, and comment this out and see that it disappears and then when we remove the comment, we'll see that it comes back. The streamlit.write function is more powerful than the write a variable name somewhere in your script by itself because it can be called from inside of a function or a loop inside of some if condition or anywhere your Python code can execute. And it doesn't have the restriction of needing to be just at the top level of our script.

109
01:12:38.000 --> 01:13:31.000
And it doesn't have the restriction of needing to be just at the top level of our script. OK, so now there is instrument, the notion of a sidebar. What we'll do is we will say that new is equal to streamlit.sidebar.slider and we will call the label for this slider equal to mu. The min value looking down here at the jibiter version is zero. The max value was 550 and the step was 50.0. We'll create another slider for sigma and we will label this as sigma and we will copy the same arguments that we have in the jibiter version. 50 and then 150.

110
01:13:23.000 --> 01:14:13.000
copy the same arguments that we have in the jibiter version. 50 and then 150. If they step sidebar, we'll then replace the 300 and 100 with mu and sigma. So here we let's see what happens then we'll talk if you're. So we run this code and OK, it's telling us that we need to have seeing data types. So here it says that I had a min value was an int and the max value was an int and the step was a float. So if we make all of these floats then we won't have this same kind of type of shape. The now what we see is streamlit

111
01:14:06.000 --> 01:14:52.000
floats then we won't have this same kind of type of shape. The now what we see is streamlit has added on the left hand a panel all the sidebar that's where this name comes from with our sliders. And now we can see that as we move these sliders around our figures updated. So we kind of have here a control panel that we have a label sigma and when we move the slider around we see that the value of sigma changes in the text annotation as well as the distribution line over here. So now streamlit is allowing us to change these variables and you'll notice that anywhere

112
01:14:44.000 --> 01:15:31.000
over here. So now streamlit is allowing us to change these variables and you'll notice that anywhere that mu and sigma were used throughout the script you're seeing these values update. So here it says method of moment estimators are and if we move mu around they're going to change. And so what's happening is as the sliders get in the throw out bring that will send back to Python land updated value for mu or sigma and then it will execute all the code that depends on mu and sigma. Let's summarize what we've learned today. We started by talking about the

113
01:15:22.000 --> 01:16:11.000
depends on mu and sigma. Let's summarize what we've learned today. We started by talking about the importance of communication and how it's essential in order to have an impact and be successful as knowledge workers. We discussed how effective communication requires an understanding of the audience that is receiving the communication as well as the content and type of content to be communicated. Once these have been identified, being able to choose the correct medium and technology for distribution will lead to success in communicating. There are many static ways we can share

114
01:16:01.000 --> 01:16:54.000
distribution will lead to success in communicating. There are many static ways we can share to put an open. In this lecture we talked about a few of them including sharing the notebook on GitHub, sharing on Quant Econ notes or using NB convert to create a single file version of the notebook in a different via format. The via formats and be convert supports include a PDF, a Python script, each shiml file and slides. We also discussed how there are many interactive ways to share our Python analysis. One way is to publish the source code that we developed to PIPI as a Python package.

115
01:16:46.000 --> 01:17:32.000
analysis. One way is to publish the source code that we developed to PIPI as a Python package. This enables other programmers to PIP install our code and use it within their own exercises. Another option would be to create an API that users of Python or any programming language could use an access in order to access the data or other outputs from our work. Another interactive solution for sharing or communicating is to create an interactive application. We saw examples of how to do this using Voila to transform a Jupyter notebook into an

116
01:17:26.000 --> 01:17:57.000
We saw examples of how to do this using Voila to transform a Jupyter notebook into an interactive application and also stream it to create an interactive website from a Python script. We hope that you've learned some things and that you now have a better sense of how you can access the tools and technologies within the Python ecosystem or sharing the results of your work and effectively communicating the lessons that you've learned.

